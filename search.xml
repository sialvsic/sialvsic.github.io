<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Html]]></title>
      <url>http://yoursite.com/2016/12/26/html/</url>
      <content type="html"><![CDATA[<h1 id="html">HTML</h1>
<h2 id="shi-yao-shi-html">什么是HTML？</h2>
<h2 id="html-zhu-shi">HTML注释</h2>
<p>普通注释
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- --&gt;</span></div></pre></td></tr></table></figure></p>
<p>条件注释</p>
<p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--[if IE 8]&gt;</span></div><div class="line">    .... some HTML here ....</div><div class="line">&lt;![endif]--&gt;</div></pre></td></tr></table></figure></p>
<h2 id="html-biao-qian">HTML标签</h2>
<h3 id="chang-yong-biao-qian">常用标签</h3>
<h4 id="div">div</h4>
<p><code>&lt;div&gt;</code>标签可以将网页分割成不同的、清晰的、独立的局部模块，然后在不同的模块中添加内容。 这样使网页布局结构更加清晰，代码更加独立，代码修改时能尽量少地影响到整体页面， 所以在网页开发中提倡使用<code>&lt;div&gt;</code>标签</p>
<blockquote>
<p>position:绝对定位和相对定位 (abosolute,relative)</p>
</blockquote>
<p>height:<code>&lt;div&gt;</code>模块的高度</p>
<blockquote></blockquote>
<p>width:<code>&lt;div&gt;</code>模块的宽度</p>
<blockquote></blockquote>
<p>left:相对于窗口左边的位置</p>
<blockquote></blockquote>
<p>top:相对于窗口上边的位置</p>
<h4 id="blockquote">blockquote</h4>
<p><code>&lt;blockquote&gt;</code>标签可以将其包含起来的文字，全部向右缩进，而且加一组此标签就会向右缩进一个单位</p>
<h4 id="p">p</h4>
<p>定义段落</p>
<h4 id="pre">pre</h4>
<p><code>&lt;pre&gt;</code>标签修饰的内容一般会保留内容中的空格和换行符。在浏览器中显示时，会按照编辑器中预先排好的形式显示内容</p>
<h4 id="ol-li">ol li</h4>
<p>有序列表</p>
<h4 id="ul-li">ul li</h4>
<p>无序列表</p>
<h4 id="dl-dd-dt">dl dd dt</h4>
<p><code>&lt;dl&gt;&lt;/dl&gt;</code>用来创建一个普通的列表,	
<code>&lt;dt&gt;&lt;/dt&gt;</code>用来创建列表中一条内容A，
<code>&lt;dd&gt;&lt;/dd&gt;</code>用来创建A内容的一条子内容B，</p>
<h4 id="a">a</h4>
<p>属性</p>
<ul>
<li>
<p>href : 用来接收一个URL</p>
<ul>
<li>External Hyperlinks : 创建超链接到其他html页面，href属性设置为以&quot;http://&quot;开始的URL
href=&quot;http://www.baidu.com&quot;</li>
<li>Relative URLs 如果href属性不以可识别的协议（如：http://）开始，而是链接本地的html页面，那么浏览器将这种超链接视为 Relative URLs
href=&quot;index.html&quot;</li>
<li>Internal Hyperlinks 内部链接，它可以直接跳到当前页面中一个特定的模块，创建内部链接可以使用css的样式id选择器
href=&quot;#test&quot;</li>
</ul>
</li>
<li>
<p>target : 表示在哪里打开链接文档</p>
<ul>
<li>_self表示在当前窗口当前框架中打开（<code>默认</code>）</li>
<li>_blank 表示在一个新的窗口中打开链接文档</li>
<li>_parent 表示在当前框架的父框架中打开</li>
<li>_top 表示先把所有被包含的框架清除，然后将链接文档展示在整个窗口</li>
</ul>
</li>
<li>
<p>framename 表示在特定框架（名为framename）中打开连接文档</p>
</li>
</ul>
<p>a 标签可以用于发送邮件，使用mailto
这是一个 mailto 链接：</p>
<p><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"mailto:someone@microsoft.com?cc=someoneelse@microsoft.com&amp;bcc=andsomeoneelse2@microsoft.com&amp;subject=Summer%20Party&amp;body=You%20are%20invited%20to%20a%20big%20summer%20party!"</span>&gt;发送邮件！&lt;<span class="regexp">/a&gt;</span></div><div class="line"></div><div class="line">/<span class="regexp">/使用%20来代替空格</span></div></pre></td></tr></table></figure></p>
<p>注意在使用时如果src中的内容为网址，必须要加上http才行，如下所示不work会跳转到当前的路径的路由下
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="img">img</h4>
<p>加载图片，主要的两个属性为src和alt</p>
<ul>
<li>src： 定义图片的位置路径</li>
<li>alt：指定alt 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的</li>
</ul>
<p>背景图片：<code>如果图像小于页面，图像会进行重复</code></p>
<h4 id="table">table</h4>
<p><code>&lt;table&gt;</code>:定义HTML文档中的表格。如果需要给表格设置边框，则<code>&lt;table border=”1”&gt;</code></p>
<ul>
<li>th 定义表格中的表头</li>
<li>tr 定义表格中的一行</li>
<li>td 定义表格中的一列</li>
<li>thead 定义表格的页头</li>
<li>tbody 定义表格的主体</li>
<li>tfoot 定义表格的页脚
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生成绩单<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>平均<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>24<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></li>
</ul>
<p>**NOTE：**tfoot 标签放在tbody标签的外部</p>
<p>caption标签:给表格设置标题，在<code>&lt;table&gt;</code>标签内添加标题
colspan设置表格的占用标准表格的几列；
rowspan设置表格的占用标准表格的几行；</p>
<h4 id="hr">hr</h4>
<p>hr标签定义水平线<code>&lt;hr/&gt;</code></p>
<h4 id="br">br</h4>
<p>换行<code>&lt;br/&gt;</code></p>
<h2 id="html-te-shu-biao-qian">HTML特殊标签</h2>
<h3 id="base">base</h3>
<p>base 标签为页面上的所有链接规定默认地址或默认目标（target）</p>
<p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn/images/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">"_blank"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>no set<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    //可以正常跳转</div><div class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#link"</span>&gt;</span>link   //跳转到http://www.w3school.com.cn/images/#link</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="meta">meta</h3>
<p><code>&lt;meta&gt;</code> 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。
典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。</p>
<p>针对搜索引擎的关键词
一些搜索引擎会利用 meta 元素的 name 和 content 属性来索引您的页面。
下面的 meta 元素定义页面的描述：</p>
<p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta <span class="built_in">name</span>=<span class="string">"description"</span> content=<span class="string">"Free Web tutorials on HTML, CSS, XML"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>下面的 meta 元素定义页面的关键词：</p>
<p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta <span class="built_in">name</span>=<span class="string">"keywords"</span> content=<span class="string">"HTML, CSS, XML"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>name 和 content 属性的作用是描述页面的内容。</p>
<h2 id="html-shu-xing">HTML属性</h2>
<blockquote>
<p>HTML标签是我们用以表达页面内容及结构的。 势必有些标签我们需要对他进行更细致的设置。所以引入了属性。属性提供了有关 HTML 元素的更多的信息</p>
</blockquote>
<ul>
<li>属性总是以名称/值对（又叫键值对）的形式出现，比如：name=&quot;value&quot;。属性的名称通常叫做“属性名”，值叫做“属性值”。等号两边可以有空格，但是一般不用</li>
<li>属性值可以不使用引号，当值里有空格等特殊符号的时候，需要双引号或单引号引起，但是<code>建议使用引号</code>。</li>
<li>属性总是在 HTML 元素的开始标签中规定。</li>
<li>属性名和属性值对大小写不敏感</li>
<li>一个元素可以有多个属性</li>
</ul>
<h3 id="html-quan-ju-shu-xing">HTML全局属性</h3>
<p>有一些属性是global的,就是说每一个HTML元素都拥有这些属性</p>
<ul>
<li>accesskey 用来设置快速使当前元素获得焦点的快捷键(不同的操作系统下,不同的浏览器里要配以不同的功能键)</li>
<li>class 用来指定当前元素使用css里定义的哪个的class,又是也只是被用来标明语义</li>
<li>contenteditable 元素里的内容是否可以被修改</li>
<li>contextmenu</li>
<li>dir</li>
<li>draggable 标明元素是否可以被拖拽</li>
<li>dropzone</li>
<li>hidden  隐藏</li>
<li>id :元素的id,一个页面只能有一个叫做&quot;xxx&quot;的id</li>
<li>lang</li>
<li>spellcheck 拼写检查</li>
<li>style 指定元素的样式,要用css语言</li>
<li>tabindex</li>
<li>title 标题</li>
</ul>
<h2 id="html-zi-fu-shi-ti">HTML 字符实体</h2>
<p>不间断空格(<code>&amp;nbsp;</code>)；其他的详见http://www.w3school.com.cn/html/html_entities.asp</p>
<h2 id="biao-dan-form">表单- Form</h2>
<p>form表单：用来接收用户输入信息</p>
<h3 id="form-shu-xing">Form 属性：</h3>
<blockquote>
<ul>
<li>action ：设置URL将表单数据发送到相应的服务器</li>
<li>method：设置如何发送表单数据，分为两种方式&quot;post&quot;和&quot;get&quot;,默认为&quot;get&quot;方法</li>
<li>&quot;get&quot;方法 浏览器与action属性中的URL建立连接后，一次传输表单中所有的数据，并且会将数据直接附在URL之后。（不安全）</li>
<li>&quot;post&quot;方法 浏览器与action属性中的URL进行连接后，浏览器将表单数据分段发送给服务器；在服务器端，需要对接收到的数据进行解码处理（服务器端会表明如何让接受数据参数）</li>
<li>accept-charset ：设置服务器用哪种字符集处理表单数据。一般常用的字符集为：(UTF-8:Unicode字符编码)、 (ISO-8859-1:拉丁字母表的字符编码)、（gb2312:简体中文字符集)</li>
<li>enctype： 设置在发送到服务器之前对表单数据的编码，默认：url-encoded</li>
<li>autocomplete ：设置是否开启表单自动填写补全功能，默认为&quot;on&quot;。</li>
<li>name:   表单的名字</li>
<li>novalidate ：设置提交表单时不对表单进行验证。</li>
<li>target ： 设置在何处打开action属性的URL</li>
</ul>
</blockquote>
<h3 id="form-fen-zu-de-biao-qian">Form分组的标签：</h3>
<blockquote>
<p>FieldSet :  将表单中的相关内容分组
legend ：给表单中的每个组添加描述信息</p>
</blockquote>
<h3 id="button">Button</h3>
<blockquote>
<p>type=&quot;button&quot; 按钮为普通的可点击按钮
type=&quot;submit&quot; 按钮为提交按钮
type=&quot;reset&quot; 按钮是重置按钮</p>
</blockquote>
<h3 id="input">input</h3>
<p>input ：单行文本输入框</p>
<p>input属性</p>
<blockquote>
<p>size： 表示输入框可以展示字符的长度
maxlength： 表示输入框可以展示字符的长度。
placeholder： 文字占位符
value： 输入框中显示的文字,(第一次设置的为初始值)
disabled： 输入字段是禁用的，被禁用的元素是不可用和不可点击的，也是不可提交的
autofocus ：自动将光标聚焦在已设置的输入框中
readonly: 规定只能为只读
type：</p>
</blockquote>
<ul>
<li>number : 数字输入框</li>
<li>range : 范围输入框</li>
<li>checkbox : 多选框</li>
<li>radio ： 单选框</li>
<li>email：邮箱</li>
<li>tel：电话</li>
<li>date：日期</li>
<li>time：时间</li>
<li>color：颜色</li>
<li>search：搜索</li>
<li>file：文件上传</li>
<li>hidden：隐藏输入框</li>
<li>submit:：提交表单</li>
<li>button:  设置为按钮</li>
<li>url：该包含 URL 地址的输入字段</li>
<li>text:  文本</li>
<li>passowod： 密码</li>
<li></li>
</ul>
<p>注意： 有些浏览器并不完全支持html5 的input 中定义的一些属性，具体的可以查阅http://caniuse.com/</p>
<h3 id="datalist">datalist</h3>
<p>为文本框创建展示列表</p>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">"cars"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">"cars"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"BMW"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Ford"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"Volvo"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="select">select</h3>
<p>选择输入框
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"char"</span><span class="attr">name</span>=<span class="string">"char"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"A"</span> &gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"B"</span> &gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"C"</span> <span class="attr">selected</span> &gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"D"</span> &gt;</span>D<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>select 标签属性multiple 设置显示多行选项</p>
<h3 id="textarea">textarea</h3>
<p>多行文本的文本框</p>
<blockquote></blockquote>
<p>autofocus 文本框自动获得焦点</p>
<blockquote></blockquote>
<p>cols=&quot;20&quot; 文本框的可以展示字符的宽度</p>
<blockquote></blockquote>
<p>disabled 该文本框中的内容不可编辑</p>
<blockquote></blockquote>
<p>form=&quot;form_id&quot; 该文本框属于哪个表单</p>
<blockquote></blockquote>
<p>maxlength 文本框中可以输入的字符的最大长度</p>
<blockquote></blockquote>
<p>name 文本框的名字</p>
<blockquote></blockquote>
<p>placeholder 文本框的文字占位符</p>
<blockquote></blockquote>
<p>pattern 给文本框输入的内容设定格式</p>
<blockquote></blockquote>
<p>readonly 文本框为只读，内容不可编辑</p>
<blockquote></blockquote>
<p>required 文本框为必填的</p>
<blockquote></blockquote>
<p>rows 文本框的可见行数</p>
<blockquote></blockquote>
<p>wrap=&quot;hard&quot;/&quot;soft&quot; 在提交表单时，文本内容换行的换行方式</p>
<h2 id="html-an-quan-se">HTML安全色</h2>
<p><img src="http://obqvt6b56.bkt.clouddn.com/blog-html-web-safe-color.png" alt="Alt text"></p>
<h2 id="html-jia-zai-js">Html 加载js</h2>
<p>使用 script 元素标签可以插入js的代码到html中，script 元素既可包含脚本语句，也可通过 src 属性指向外部脚本文件。</p>
<p>eg1：</p>
<p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="actionscript"> </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">function1</span><span class="params">()</span></span>&#123; </div><div class="line">  <span class="comment">//TODO</span></div><div class="line">&#125; </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>eg2:</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.html</span></div><div class="line"> &lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./index.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//indes.js</span></div><div class="line"></div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">或是</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//TODO</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div></pre></td></tr></table></figure></p>
<h2 id="html-jia-zai-css">Html 加载css</h2>
<p>加载css有三种方式</p>
<ul>
<li>外部样式表</li>
<li>内部样式表</li>
<li>内联样式</li>
</ul>
<p>eg1: 外部样式表</p>
<p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>eg2: 内部样式表
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>eg3: 内部样式</p>
<p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red; margin-left: 20px"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="shi-li">实例</h2>
<h3 id="html-zhong-bu-shi-yong-css-tian-jia-style">html中不使用css添加style</h3>
<p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">style</span>=<span class="string">"position: absolute; height: 200px; width: 200px; background-color: #00aaaa; left: 30px;top: 30px;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是id为"test",距左边框30px,居上边框30px,高度为200px,宽度为200px的,背景颜色为#0000ff的div块</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="wen-ti">问题</h2>
<h3 id="chang-jian-de-jian-dan-de-wen-ti">常见的简单的问题</h3>
<ul>
<li>可以添加背景颜色<code>&lt;body bgcolor=&quot;yellow&quot;&gt;</code>   不赞成使用的标签，废弃</li>
<li>产生粗体的html标签  <code>&lt;b&gt;</code></li>
<li>电子邮件链接 <code>&lt;a href=&quot;mailto:xxx@yyy&quot;&gt;</code></li>
<li>新窗口打开链接 <code>&lt;a href=&quot;url&quot; target=&quot;_blank&quot;&gt;</code></li>
<li>如何产生带有圆点列表符号的列表  <code>&lt;ul&gt;</code></li>
<li>如何产生带有数字列表符号的列表  <code>&lt;ol&gt;</code></li>
<li>设置文字居中<code>&lt;h1 align=&quot;center&quot;&gt; 拥有关于对齐方式的附加信息。</code>   不赞成使用的标签，废弃</li>
<li>任意元素加上了title属性后，鼠标悬浮会自动的显示一个提示，但是会有一点延迟</li>
<li><code>&lt;pre&gt;</code>定义预格式文本，这个标签可以用于显示需要留空格的文本</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Webpack-high-optimize]]></title>
      <url>http://yoursite.com/2016/12/21/webpack-high-optimize/</url>
      <content type="html"><![CDATA[<h1 id="webpack-gao-ji-you-hua">webpack 高级优化</h1>
<h2 id="you-hua">优化</h2>
<h3 id="1-ru-he-qu-fen-kai-fa-ji-sheng-chan-huan-jing">1.如何区分开发及生产环境</h3>
<p>在package.json里面的script设置环境变量，注意mac与windows的设置方式不一样</p>
<p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"publish-mac"</span>: <span class="string">"export NODE_ENV=prod&amp;&amp;webpack -p --progress --colors"</span>,</div><div class="line">    <span class="string">"publish-win"</span>:  <span class="string">"set NODE_ENV=prod&amp;&amp;webpack -p --progress --colors"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在webpack.config.js使用process.env.NODE_ENV进行判断</p>
<p>功能标识</p>
<p>项目中有些代码我们只为在开发环境（例如日志）或者是内部测试环境（例如那些没有发布的新功能）中使用，那就需要引入下面这些魔法全局变量（magic globals）：</p>
<p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">if</span> (__DEV__) &#123;</div><div class="line">  <span class="selector-tag">console</span><span class="selector-class">.warn</span>(<span class="string">'Extra logging'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="selector-tag">if</span> (__PRERELEASE__) &#123;</div><div class="line">  <span class="selector-tag">showSecretFeature</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同时还要在webpack.config.js中配置这些变量，使得webpack能够识别他们。</p>
<p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"></div><div class="line"><span class="comment">// definePlugin 会把定义的string 变量插入到Js代码中。</span></div><div class="line"><span class="keyword">var</span> definePlugin = <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">  <span class="attr">__DEV__</span>: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(process.env.BUILD_DEV || <span class="string">'true'</span>)),</div><div class="line">  <span class="attr">__PRERELEASE__</span>: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(process.env.BUILD_PRERELEASE || <span class="string">'false'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [definePlugin]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>配置完成后，就可以使用 BUILD_DEV=1 BUILD_PRERELEASE=1 webpack来打包代码了。 值得注意的是，webpack -p 会删除所有无作用代码，也就是说那些包裹在这些全局变量下的代码块都会被删除，这样就能保证这些代码不会因发布上线而泄露。</p>
<h3 id="2-shi-yong-dai-ma-re-ti-huan">2.使用代码热替换</h3>
<p>参考webpack-dev-server: https://webpack.github.io/docs/webpack-dev-server.html#hot-module-replacement</p>
<h3 id="3-import-react-dao-zhi-wen-jian-bian-da-bian-yi-su-du-bian-man-zha-ban">3.import react导致文件变大，编译速度变慢，乍办?</h3>
<p>方法</p>
<ul>
<li>A 如果你想将react分离，不打包到一起，可以使用externals。然后用&lt;script&gt;单独将react引入</li>
<li>B 如果不介意将react打包到一起，请在alias中直接指向react的文件。可以提高webpack搜索的速度。准备部署上线时记得将换成react.min，能减少文件大小(减少约600kb)</li>
<li>C 使用module.noParse针对单独的react.min.js这类没有依赖的模块，速度会更快</li>
</ul>
<h3 id="4-jiang-mo-kuai-bao-lu-dao-quan-ju">4.将模块暴露到全局</h3>
<p>如果想将report数据上报组件放到全局，有两种办法：
方法一：
在loader里使expose将report暴露到全局，然后就可以直接使用report进行上报</p>
<p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attribute">test</span>: path.<span class="built_in">join</span>(config.path.src, <span class="string">'/js/common/report'</span>),</div><div class="line">    loader: <span class="string">'expose?report'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法二：
如果想用R直接代表report，除了要用expose loader之外，还需要用ProvidePlugin帮助，指向report，这样在代码中直接用R.tdw， R.monitor这样就可以</p>
<p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">    <span class="string">"R"</span>: <span class="string">"report"</span>,</div><div class="line">&#125;),</div></pre></td></tr></table></figure></p>
<h3 id="5-he-bing-gong-gong-dai-ma">5. 合并公共代码</h3>
<p>有些类库如utils, bootstrap之类的可能被多个页面共享，最好是可以合并成一个js，而非每个js单独去引用。这样能够节省一些空间。这时我们可以用到CommonsChunkPlugin，我们指定好生成文件的名字，以及想抽取哪些入口js文件的公共代码，webpack就会自动帮我们合并好
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new webpack<span class="selector-class">.optimize</span><span class="selector-class">.CommonsChunkPlugin</span>(<span class="string">'vendor'</span>, <span class="string">'vendor.js'</span>)</div></pre></td></tr></table></figure></p>
<p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">webpack</span><span class="selector-class">.optimize</span><span class="selector-class">.CommonsChunkPlugin</span>(&#123;</div><div class="line">           <span class="attribute">name</span>:      <span class="string">'main'</span>, // 把依赖移动到主文件</div><div class="line">           children:  true, // 寻找所有子模块的共同依赖</div><div class="line">           minChunks: <span class="number">2</span>, // 设置一个依赖被引用超过多少次就提取出来</div><div class="line">       &#125;),</div></pre></td></tr></table></figure></p>
<p>第一个参数是entry中的vendor的名字</p>
<p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">entry</span>: &#123;</div><div class="line">    <span class="attribute">jsx</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">    <span class="attribute">html</span>: <span class="string">'./src/index.html'</span>,</div><div class="line">    <span class="attribute">vendor</span>: [<span class="string">'jquery'</span>]       <span class="comment">//Array</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="6-shan-yong-alias">6.善用alias</h3>
<p>resolve里面有一个alias的配置项目，能够让开发者指定一些模块的引用路径。对一些经常要被import或者require的库，如react,我们最好可以直接指定它们的位置，这样webpack可以省下不少搜索硬盘的时间。
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span>: &#123;</div><div class="line">      <span class="string">'react'</span>: path.<span class="keyword">join</span>(<span class="string">'node_modules'</span>,<span class="string">'react/dist/react.min'</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="7-react-hot-loader-zu-jian-ji-re-geng-xin">7.React-hot-loader组件级热更新</h4>
<p>虽然实现了代码的热替换，只要在编辑器中保存我们编辑的代码，浏览器即可实时刷新。但同时也有一个烦恼，如果我们的项目开发中用到了几十个组件，为了测试某个组件我们需要一步步操作到固定的步骤去实现，一旦保存编辑器中修改的一行代码，从入口文件开始的所有代码都全部刷新了一次，这样很不利于调试。</p>
<p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   test: <span class="regexp">/\.jsx|js$/</span>,</div><div class="line">   exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">   loaders: [<span class="string">'react-hot'</span>, <span class="string">'babel?presets[]=react,presets[]=es2015'</span>]</div><div class="line">   <span class="regexp">//</span>原先的配置</div><div class="line">   <span class="regexp">//</span> loader: <span class="string">'babel-loader'</span>,</div><div class="line">   <span class="regexp">//</span> query: &#123;</div><div class="line">   <span class="regexp">//</span>   presets: [<span class="string">'react'</span>, <span class="string">'es2015'</span>]</div><div class="line">   <span class="regexp">//</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="8-ru-he-ya-suo-dai-ma">8.如何压缩代码</h3>
<p>在生产环境中我们需要将代码压缩，尽可能的减少代码的体积，所以需要在生产环境的webpack中加入以下插件
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">plugins</span>: [</div><div class="line">    // 代码混淆压缩</div><div class="line">    new webpack.optimize.<span class="built_in">UglifyJsPlugin</span>(&#123;</div><div class="line">      compress: &#123;</div><div class="line">        warnings: false</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>加入了这个插件之后，编译的速度会明显变慢，所以一般只在生产环境启用。</p>
<p>另外，服务器端还可以开启 gzip 压缩，优化的效果更明显。</p>
<h3 id="9-dai-ma-yun-xing-qian-tian-jia-eslint-de-jian-ce">9. 代码运行前添加eslint的检测</h3>
<p>新建一个eslint.rc的配置文件
安装eslint-loader</p>
<p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">preLoaders:</span> [</div><div class="line">      &#123;</div><div class="line"><span class="symbol">        test:</span> /\.js$/,</div><div class="line"><span class="symbol">        loader:</span> <span class="string">"eslint-loader"</span>,</div><div class="line"><span class="symbol">        exclude:</span> /node_modules/</div><div class="line">      &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="10-build-qian-xian-qing-li-build-mu-lu">10.build前先清理build目录</h3>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> clean-webpack-<span class="keyword">plugin</span> <span class="comment">--save-dev</span></div></pre></td></tr></table></figure></p>
<h2 id="can-kao-zi-liao">参考资料</h2>
<ul>
<li>webpack使用优化： http://www.alloyteam.com/2016/01/webpack-use-optimization/</li>
<li>如何十倍提升你的webpack构建效率： http://gold.xitu.io/entry/5768e6ab207703006b310f95</li>
<li>让Webpack 来帮你打包吧： https://gold.xitu.io/entry/5767a975df0eea0062ffe193</li>
<li>webpackForSPA:  https://github.com/huangshuwei/webpackForSPA/blob/master/webpack.config.js</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Webpack-how-to-set-up]]></title>
      <url>http://yoursite.com/2016/12/21/webpack-how-to-set-up/</url>
      <content type="html"><![CDATA[<h1 id="webpack-how-to-setup">Webpack how to setup</h1>
<h2 id="shi-zhan">实战</h2>
<p>需求： 建立一个支持以下功能的webpack + react 配置</p>
<ul>
<li>ES6</li>
<li>React(jsx)</li>
<li>Webpack  (css/less/scss  图片  字体 html)</li>
<li>第三方依赖（jquery）</li>
<li>热加载</li>
<li>自动刷新</li>
<li>局部自动刷新</li>
</ul>
<h3 id="step-by-step">Step by step</h3>
<p>V1 支持</p>
<ul>
<li>Support <code>ES5</code> grammar</li>
<li>基本构建</li>
<li>React(jsx)解析</li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> webpack babel-loader  <span class="comment">--save-dev</span></div><div class="line">$ npm <span class="keyword">install</span> react react-dom <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">'./src/index.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: <span class="string">'./public'</span>,</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="keyword">module</span>: &#123;</div><div class="line">    loaders: [&#123;</div><div class="line">      test: <span class="regexp">/\.jsx|js$/</span>,</div><div class="line">      exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      loader: <span class="string">'babel-loader'</span></div><div class="line">    &#125;]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//babel-loader   依赖于babel-core和babel-loader</span></div><div class="line"></div><div class="line"><span class="comment">//package.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.18.2"</span>,</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^6.2.8"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.13.3"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"react"</span>: <span class="string">"^15.4.0"</span>,</div><div class="line">    <span class="string">"react-dom"</span>: <span class="string">"^15.4.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>V2 支持</p>
<ul>
<li>ES6</li>
<li>React（JSX）</li>
<li>Html解析</li>
<li>指定路径解析位置</li>
</ul>
<p>安装：
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install </span> file-loader <span class="keyword">babel-preset-es2015 </span><span class="keyword">babel-preset-react </span>--save-dev</div></pre></td></tr></table></figure></p>
<p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    jsx: <span class="string">'./src/index.js'</span>,</div><div class="line">    html: <span class="string">'./src/index.html'</span></div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: <span class="string">'./public'</span>,</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    root: [path.resolve(<span class="string">'./src'</span>)],</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="keyword">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.jsx|js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'babel-loader'</span>,</div><div class="line">        query: &#123;</div><div class="line">          presets: [<span class="string">'react'</span>, <span class="string">'es2015'</span>]</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(html)$/</span>,</div><div class="line">        loader: <span class="string">'file?name=[name].[ext]'</span></div><div class="line">      &#125;,</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//file?name=[name].[ext] 依赖于file-loader</span></div><div class="line"><span class="comment">//query: </span></div><div class="line"><span class="comment">//&#123;</span></div><div class="line"><span class="comment">//   presets: ['react','es2015']   依赖于babel-preset-react 和 babel-preset-es2015</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//package.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.18.2"</span>,</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^6.2.8"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.18.0"</span>,</div><div class="line">    <span class="string">"babel-preset-react"</span>: <span class="string">"^6.16.0"</span>,</div><div class="line">    <span class="string">"file-loader"</span>: <span class="string">"^0.9.0"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.13.3"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"react"</span>: <span class="string">"^15.4.0"</span>,</div><div class="line">    <span class="string">"react-dom"</span>: <span class="string">"^15.4.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>V3 支持</p>
<ul>
<li>添加了第三方依赖</li>
<li>热加载HMR</li>
<li>自动刷新</li>
<li>配置npm 命令</li>
<li>合并公共代码</li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> react-hot-loader webpack-dev-<span class="keyword">server</span> <span class="comment">--save</span></div><div class="line">$ npm <span class="keyword">install</span> jquery <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//webpack.config.js</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    jsx: <span class="string">'./src/index.js'</span>,</div><div class="line">    html: <span class="string">'./src/index.html'</span>,</div><div class="line">    vendor: [<span class="string">'jquery'</span>]       <span class="comment">//Array</span></div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">'/public'</span>,</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    root: [path.resolve(<span class="string">'./src'</span>)],</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="keyword">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.jsx|js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loaders: [<span class="string">'react-hot'</span>, <span class="string">'babel?presets[]=react,presets[]=es2015'</span>]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(html)$/</span>,</div><div class="line">        loader: <span class="string">'file?name=[name].[ext]'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">      $: <span class="string">"jquery"</span>,</div><div class="line">      jQuery: <span class="string">"jquery"</span>,</div><div class="line">      <span class="string">"window.jQuery"</span>: <span class="string">"jquery"</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'vendor'</span>, <span class="string">'vendor.js'</span>),</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将第三方依赖注入到vendor.js中</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//package.json</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server  --inline --hot --display-error-details  --history-api-fallback  --progress --colors --port 5000 --host 0.0.0.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.18.2"</span>,</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^6.2.8"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.18.0"</span>,</div><div class="line">    <span class="string">"babel-preset-react"</span>: <span class="string">"^6.16.0"</span>,</div><div class="line">    <span class="string">"file-loader"</span>: <span class="string">"^0.9.0"</span>,</div><div class="line">    <span class="string">"react-hot-loader"</span>: <span class="string">"^1.3.1"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.13.3"</span>,</div><div class="line">    <span class="string">"webpack-dev-server"</span>: <span class="string">"^1.16.2"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"jquery"</span>: <span class="string">"^3.1.1"</span>,</div><div class="line">    <span class="string">"react"</span>: <span class="string">"^15.4.0"</span>,</div><div class="line">    <span class="string">"react-dom"</span>: <span class="string">"^15.4.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>V4 完整版
支持:</p>
<ul>
<li>ES6</li>
<li>React(jsx)</li>
<li>Webpack  (css/less/scss  图片  字体 html)</li>
<li>Html解析</li>
<li>指定路径解析位置</li>
<li>第三方依赖（jquery）</li>
<li>热加载</li>
<li>自动刷新</li>
<li>配置npm 命令</li>
<li>eslint(pre-loader 不是很实用)</li>
<li>生产模式webpack</li>
<li>开发模式webpack</li>
</ul>
<p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//开发模式</span></div><div class="line"><span class="comment">//webpack.dev.config.js</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    jsx: <span class="string">'./src/index.js'</span>,</div><div class="line">    html: <span class="string">'./src/index.html'</span>,</div><div class="line">    ico: <span class="string">'./src/favicon.ico'</span>,</div><div class="line">    vendor: [<span class="string">'jquery'</span>]       <span class="comment">//Array</span></div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(<span class="string">'./build'</span>),</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    root: [path.resolve(<span class="string">'./src'</span>)],</div><div class="line">    publicPath: <span class="string">'/'</span>,</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>],</div><div class="line">    modulesDirectories: [<span class="string">'node_modules'</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="keyword">module</span>: &#123;</div><div class="line">    preLoaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        loader: <span class="string">"eslint-loader"</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.jsx|js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loaders: [<span class="string">'react-hot'</span>, <span class="string">'babel?presets[]=react,presets[]=es2015'</span>]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loaders: [</div><div class="line">          <span class="string">'style-loader'</span>,</div><div class="line">          <span class="string">'css-loader?importLoaders=1'</span>,</div><div class="line">          <span class="string">'postcss-loader'</span></div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.scss$/</span>,</div><div class="line">        loaders: [</div><div class="line">          <span class="string">'style'</span>,</div><div class="line">          <span class="string">'css'</span>,</div><div class="line">          <span class="string">'postcss'</span>,</div><div class="line">          <span class="string">'sass'</span></div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(png|jpg)$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'url-loader?limit=8192&amp;name=/images/[name].[ext]'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(eot|svg|ttf|woff)$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'url-loader?limit=8192&amp;name=/fonts/[name].[ext]'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(html|ico)$/</span>,</div><div class="line">        loader: <span class="string">'file?name=[name].[ext]'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">      $: <span class="string">'jquery'</span>,</div><div class="line">      jQuery: <span class="string">'jquery'</span>,</div><div class="line">      <span class="string">'window.jQuery'</span>: <span class="string">'jquery'</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'vendor'</span>, <span class="string">'vendor.js'</span>)</div><div class="line">  ],</div><div class="line">  devtool: <span class="string">'eval-source-map'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//生产模式</span></div><div class="line"><span class="comment">//webpack.prod.config.js</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> CleanPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    jsx: <span class="string">'./src/index.js'</span>,</div><div class="line">    html: <span class="string">'./src/index.html'</span>,</div><div class="line">    ico: <span class="string">'./src/favicon.ico'</span>,</div><div class="line">    vendor: [<span class="string">'jquery'</span>]       <span class="comment">//Array</span></div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(<span class="string">'./build'</span>),</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    root: [path.resolve(<span class="string">'./src'</span>)],</div><div class="line">    publicPath: <span class="string">'/'</span>,</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>],</div><div class="line">    modulesDirectories: [<span class="string">'node_modules'</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="keyword">module</span>: &#123;</div><div class="line">    preLoaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.js$/</span>,</div><div class="line">        loader: <span class="string">"eslint-loader"</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.jsx|js$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loaders: [<span class="string">'react-hot'</span>, <span class="string">'babel?presets[]=react,presets[]=es2015'</span>]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loaders: [</div><div class="line">          <span class="string">'style-loader'</span>,</div><div class="line">          <span class="string">'css-loader?importLoaders=1'</span>,</div><div class="line">          <span class="string">'postcss-loader'</span></div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.scss$/</span>,</div><div class="line">        loaders: [</div><div class="line">          <span class="string">'style'</span>,</div><div class="line">          <span class="string">'css'</span>,</div><div class="line">          <span class="string">'postcss'</span>,</div><div class="line">          <span class="string">'sass'</span></div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(png|jpg)$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'url-loader?limit=8192&amp;name=/images/[name].[ext]'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(eot|svg|ttf|woff)$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">'url-loader?limit=8192&amp;name=/fonts/[name].[ext]'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.(html|ico)$/</span>,</div><div class="line">        loader: <span class="string">'file?name=[name].[ext]'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> CleanPlugin(<span class="string">'build'</span>),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'vendor'</span>, <span class="string">'vendor.js'</span>),</div><div class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">      <span class="string">'process.env'</span>: &#123;</div><div class="line">        NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">      compress: &#123;</div><div class="line">        warnings: <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  ],</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">//package.json</div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"autoprefixer"</span>: <span class="string">"^6.5.3"</span>,</div><div class="line">    <span class="string">"autoprefixer-loader"</span>: <span class="string">"^3.2.0"</span>,</div><div class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.18.2"</span>,</div><div class="line">    <span class="string">"babel-eslint"</span>: <span class="string">"^7.1.1"</span>,</div><div class="line">    <span class="string">"babel-jest"</span>: <span class="string">"^17.0.2"</span>,</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^6.2.8"</span>,</div><div class="line">    <span class="string">"babel-plugin-transform-decorators-legacy"</span>: <span class="string">"^1.3.4"</span>,</div><div class="line">    <span class="string">"babel-plugin-transform-es3-property-literals"</span>: <span class="string">"^6.8.0"</span>,</div><div class="line">    <span class="string">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.15.0"</span>,</div><div class="line">    <span class="string">"babel-polyfill"</span>: <span class="string">"^6.16.0"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.18.0"</span>,</div><div class="line">    <span class="string">"babel-preset-jest"</span>: <span class="string">"^17.0.2"</span>,</div><div class="line">    <span class="string">"babel-preset-react"</span>: <span class="string">"^6.16.0"</span>,</div><div class="line">    <span class="string">"babel-preset-stage-0"</span>: <span class="string">"^6.16.0"</span>,</div><div class="line">    <span class="string">"babel-runtime"</span>: <span class="string">"^6.18.0"</span>,</div><div class="line">    <span class="string">"clean-webpack-plugin"</span>: <span class="string">"^0.1.14"</span>,</div><div class="line">    <span class="string">"css-loader"</span>: <span class="string">"^0.26.0"</span>,</div><div class="line">    <span class="string">"extract-text-webpack-plugin"</span>: <span class="string">"^1.0.1"</span>,</div><div class="line">    <span class="string">"file-loader"</span>: <span class="string">"^0.9.0"</span>,</div><div class="line">    <span class="string">"node-sass"</span>: <span class="string">"^3.13.0"</span>,</div><div class="line">    <span class="string">"postcss-loader"</span>: <span class="string">"^1.2.1"</span>,</div><div class="line">    <span class="string">"react-hot-loader"</span>: <span class="string">"^1.3.1"</span>,</div><div class="line">    <span class="string">"react-scripts"</span>: <span class="string">"0.7.0"</span>,</div><div class="line">    <span class="string">"sass-loader"</span>: <span class="string">"^4.0.2"</span>,</div><div class="line">    <span class="string">"style-loader"</span>: <span class="string">"^0.13.1"</span>,</div><div class="line">    <span class="string">"url-loader"</span>: <span class="string">"^0.5.7"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.13.3"</span>,</div><div class="line">    <span class="string">"webpack-dev-server"</span>: <span class="string">"^1.16.2"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"jquery"</span>: <span class="string">"^3.1.1"</span>,</div><div class="line">    <span class="string">"postscribe"</span>: <span class="string">"^2.0.8"</span>,</div><div class="line">    <span class="string">"react"</span>: <span class="string">"^15.4.0"</span>,</div><div class="line">    <span class="string">"react-dom"</span>: <span class="string">"^15.4.0"</span>,</div><div class="line">    <span class="string">"react-modal"</span>: <span class="string">"^1.5.2"</span>,</div><div class="line">    <span class="string">"react-router"</span>: <span class="string">"^3.0.0"</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server  --config ./config/webpack.dev.config.js --inline --hot --display-error-details  --history-api-fallback  --progress --colors --port 5000 --host 0.0.0.0"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"webpack --config ./config/webpack.prod.config.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Webpack]]></title>
      <url>http://yoursite.com/2016/12/21/webpack/</url>
      <content type="html"><![CDATA[<p>Webpack 是一款模块打包的工具，它将根据模块的依赖关系进行<code>静态分析</code>，然后将这些模块按照指定的规则生成对应的静态资源。</p>
<p>webpack 是加强版的browserify，webpack解决的是<code>大型单页应用</code>的打包问题，同时解决了这些资源的依赖</p>
<p>webpack 将项目中的所有资源，js，png，.css，等等所有的东西可以视为模块</p>
<p>如下图所示，经过webpack 的处理成为静态的资源文件</p>
<p><img src="http://obqvt6b56.bkt.clouddn.com/blog-webpack-what-is-webpack.png" alt="Alt text"></p>
<p>总结：</p>
<blockquote>
<p>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作<code>模块</code>，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等</p>
</blockquote>
<p>对多种模块方案的支持与视一切资源为可管理模块的思路让他天然的适合React项目的开发，成为React官方退推荐的打包工具</p>
<h2 id="webpack-te-dian">webpack 特点</h2>
<h3 id="code-splitting-dai-ma-chai-fen">code splitting （代码拆分）</h3>
<p>code splitting 也就是entry point ，webpack会自动的完成.</p>
<p>对于较大规模的web应用 （特别是单页应用），把所有代码合并到单个文件是比较低下的做法，单个文件体积过大导致应用初始加载缓慢。尤其如果其中很多逻辑只在特定情况下需要执行，每次都完整的加载所有的模块就变得浪费。webpack提供了代码拆分的方案，可将应用代码拆分为多个块（chunk），每个块包含一个或多个模块，块可以按需被异步加载。
webpack 的依赖树中有同步和异步两种依赖方式。其中，异步模块将会被拆成一个新的块，并且在被优化后，生成一个对应的文件。</p>
<h3 id="loader-jia-zai-qi">loader（加载器）</h3>
<p>loader可以处理各种类型的静态文件，并且支持串联操作。webpack 本身只支持处理 JavaScript，但可以通过加载器来把别的资源转为 JavaScript。因此，每个资源都被当作一个模块。</p>
<p>使用loader时注意用多个loaders用<code>!</code>隔开即可，每个部分的loader的解析都相对于当前路径</p>
<h3 id="plugins-cha-jian">plugins（插件）</h3>
<p>Webpack 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 Webpack 插件，来满足各式各样的需求</p>
<h3 id="zhi-neng-jie-xi">智能解析</h3>
<p>Webpack 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是 CommonJS、 AMD 还是普通的 JS 文件。甚至在加载依赖的时候，允许使用动态表达式 require(&quot;./templates/&quot; + name + &quot;.jade&quot;)</p>
<h3 id="kuai-su-yun-xing">快速运行</h3>
<p>Webpack 使用异步 I/O 和多级缓存提高运行效率，这使得 Webpack 能够以令人难以置信的速度快速增量编译。</p>
<h2 id="shi-yong">使用</h2>
<p>有两种方式使用webpack：</p>
<ul>
<li>一种是使用命令行的方式 （在项目中不推荐使用，本文不介绍）</li>
<li>另一种写一个名为 webpack.config.js 的文件</li>
</ul>
<h3 id="jian-dan-de-pei-zhi">简单的配置</h3>
<p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line"><span class="attr">    entry:</span> <span class="string">'./app.jsx'</span>,</div><div class="line"><span class="attr">    output:</span> &#123;</div><div class="line"><span class="attr">        path:</span> <span class="string">'./'</span>,</div><div class="line"><span class="attr">        filename:</span> <span class="string">'app.js'</span></div><div class="line">    &#125;,</div><div class="line"><span class="attr">    module:</span> &#123;</div><div class="line"><span class="attr">        loaders:</span> [&#123;</div><div class="line"><span class="attr">            test:</span> /\.jsx$/,</div><div class="line"><span class="attr">            loader:</span> <span class="string">'jsx-loader'</span></div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="shu-xing-jie-shi">属性解释</h2>
<h3 id="entry">entry</h3>
<p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">entry:</span> &#123;</div><div class="line"><span class="symbol">        page1:</span> <span class="string">"./page1"</span>,</div><div class="line">        <span class="comment">//支持数组形式，将加载数组中的所有模块</span></div><div class="line"><span class="symbol">        page2:</span> [<span class="string">"./entry1"</span>, <span class="string">"./entry2"</span>]</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<p>entry：指定打包的入口文件，每有一个键值对，就是一个入口文件
如果不在这里指定，而且又不在项目代码的引用链中，那么webpack不会加载。</p>
<h3 id="output">output</h3>
<p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">output</span>: &#123;</div><div class="line">		<span class="attribute">path</span>: __dirname,</div><div class="line">		filename: <span class="string">'[name].js'</span></div><div class="line">	&#125;,</div></pre></td></tr></table></figure></p>
<p>output：配置打包结果，path定义了输出的文件夹，filename则定义了打包结果文件的名称，filename里面的 [name] 会由entry中的键值替换</p>
<p>其中有一个最重要的但容易被忽略的配置是publicPath，它表示构建结果最终被真正访问的路径</p>
<h4 id="public-path">PublicPath</h4>
<h3 id="resolve">resolve</h3>
<p>定义了解析模块路径时的配置</p>
<p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">        root： <span class="string">'~/workspace/index.js'</span>  <span class="regexp">//绝对路径</span></div><div class="line">		</div><div class="line">		// 现在你<span class="built_in">require</span>文件的时候可以直接使用<span class="built_in">require</span>(<span class="string">'file'</span>)，不用使用<span class="built_in">require</span>(<span class="string">'file.js'</span>)</div><div class="line">		extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>] </div><div class="line">	&#125;,</div></pre></td></tr></table></figure></p>
<ul>
<li>root 绝对路径，从此路径开始加载</li>
<li>extensions 用来指定模块的后缀，这样在引入模块时就不需要写后缀了，会自动补全</li>
</ul>
<h3 id="module">module</h3>
<p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">module</span>: &#123;</div><div class="line">		<span class="attribute">loaders</span>: [&#123;</div><div class="line">			test: /\.js$/,</div><div class="line">			loader: <span class="string">'babel-loader'</span></div><div class="line">		&#125;, &#123;</div><div class="line">			<span class="attribute">test</span>: /\.jsx$/,</div><div class="line">			loader: <span class="string">'babel-loader!jsx-loader?harmony'</span></div><div class="line">		&#125;]</div><div class="line">	&#125;,</div></pre></td></tr></table></figure></p>
<p>定义了对模块的处理逻辑，这里可以用loaders定义了一系列的加载器，以及一些正则。当需要加载的文件匹配test的正则时，就会调用后面的loader对文件进行处理，这正是webpack强大的原因</p>
<p>注意：
&quot;-loader&quot;其实是可以省略不写的，多个loader之间用“!”连接起来</p>
<h4 id="css-chu-li">css处理</h4>
<h4 id="less-chu-li">less处理</h4>
<h4 id="sass-chu-li">sass处理</h4>
<h4 id="tu-pian-chu-li">图片处理</h4>
<p>图片的处理需要安装url-loader.   limit= xx 的意思是当图片文件小于xx时，转换为base64的格式。同时指定生成到<code>/images/</code>的目录下</p>
<p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    test: /\.(<span class="name">png</span>|jpg)$/,</div><div class="line">    exclude: /node_modules/,</div><div class="line">    loader: 'url-loader?limit=8192&amp;name=/images/[name].[ext]'</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="zi-ti-chu-li">字体处理</h4>
<h3 id="plugins">plugins</h3>
<p>这里定义了需要使用的插件</p>
<p>常用的组件：</p>
<ul>
<li>commonsPlugin在打包多个入口文件时会提取出公用的部分，生成common.js 【eg1】</li>
<li><a href="https://github.com/gaearon/react-hot-loader" target="_blank" rel="external">react-hot-loader</a></li>
<li><a href="https://github.com/webpack/extract-text-webpack-plugin" target="_blank" rel="external">extract-text-webpack-plugin</a>  webpack 执行后会把样式文件单独提取出来，不打包到脚本中，作为单独的css文件 【eg2】</li>
<li>webpack.optimize.DedupePlugin      // 这个插件搜索相似的块与文件并合并它们     【使用时出错】</li>
<li>webpack.optimize.OccurenceOrderPlugin    // 这个插件通过计算子块和模块的使用次数进行优化   【使用时出错】</li>
<li><a href="https://github.com/michael-ciniawsky/postcss-load-config" target="_blank" rel="external">Htmlwbpackplugin</a> //可以自动生成html文件</li>
</ul>
<p>eg1：
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">	<span class="attr">plugins</span>: [commonsPlugin]</div><div class="line">&#125;</div><div class="line"></div><div class="line">或者支持自定义的提取</div><div class="line"><span class="keyword">var</span> CommonsChunkPlugin = <span class="built_in">require</span>(<span class="string">"webpack/lib/optimize/CommonsChunkPlugin"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="attr">p1</span>: <span class="string">"./page1"</span>,</div><div class="line">        <span class="attr">p2</span>: <span class="string">"./page2"</span>,</div><div class="line">        <span class="attr">p3</span>: <span class="string">"./page3"</span>,</div><div class="line">        <span class="attr">ap1</span>: <span class="string">"./admin/page1"</span>,</div><div class="line">        <span class="attr">ap2</span>: <span class="string">"./admin/page2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="keyword">new</span> CommonsChunkPlugin(<span class="string">"admin-commons.js"</span>, [<span class="string">"ap1"</span>, <span class="string">"ap2"</span>]),</div><div class="line">        <span class="keyword">new</span> CommonsChunkPlugin(<span class="string">"commons.js"</span>, [<span class="string">"p1"</span>, <span class="string">"p2"</span>, <span class="string">"admin-commons.js"</span>])</div><div class="line">    ]</div><div class="line">&#125;;</div><div class="line"><span class="comment">// &lt;script&gt;s required:</span></div><div class="line"><span class="comment">// page1.html: commons.js, p1.js</span></div><div class="line"><span class="comment">// page2.html: commons.js, p2.js</span></div><div class="line"><span class="comment">// page3.html: p3.js</span></div><div class="line"><span class="comment">// admin-page1.html: commons.js, admin-commons.js, ap1.js</span></div><div class="line"><span class="comment">// admin-page2.html: commons.js, admin-commons.js, ap2.js</span></div></pre></td></tr></table></figure></p>
<p>eg2:
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">        <span class="attr">plugins</span>: [<span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].css"</span>)],</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<p>eg3:</p>
<p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module<span class="selector-class">.exports</span> = &#123;</div><div class="line">        plugins: [</div><div class="line">        <span class="comment">// 这个插件搜索相似的块与文件并合并它们</span></div><div class="line">        new webpack<span class="selector-class">.optimize</span><span class="selector-class">.DedupePlugin</span>(),</div><div class="line">        </div><div class="line">        <span class="comment">// 这个插件通过计算子块和模块的使用次数进行优化</span></div><div class="line">        new webpack<span class="selector-class">.optimize</span><span class="selector-class">.OccurenceOrderPlugin</span>()</div><div class="line">        ],</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<h2 id="webpack-yun-xing-can-shu">webpack 运行参数</h2>
<h3 id="webpack">webpack</h3>
<ul>
<li>webapck 执行一次开发的变异</li>
</ul>
<h3 id="webpack-dev-server">webpack-dev-server</h3>
<p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$</span> <span class="comment">webpack</span><span class="literal">-</span><span class="comment">dev</span><span class="literal">-</span><span class="comment">server</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">display</span><span class="literal">-</span><span class="comment">error</span><span class="literal">-</span><span class="comment">details</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">history</span><span class="literal">-</span><span class="comment">api</span><span class="literal">-</span><span class="comment">fallback</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">hot</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">inline</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">progress</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">colors</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">4000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">0</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">0</span></div></pre></td></tr></table></figure></p>
<ul>
<li>--display-error-details 推荐加上的，方便出错时能查阅更详尽的信息</li>
<li>--progress 带有进度</li>
<li>--colors 带有颜色</li>
<li>--profile 输出性能数据，可以看到每一步的耗时</li>
<li>--display-modules 默认情况下 node_modules 下的模块会被隐藏，加上这个参数可以显示这些被隐藏的模块</li>
</ul>
<h2 id="she-zhi-huan-cun">设置缓存</h2>
<p>对于静态文件，第一次获取之后，文件内容没改变的话，浏览器直接读取缓存文件即可。那如果缓存设置过长，文件要更新怎么办呢？嗯，以文件内容的 MD5 作为文件名就是一个不错的解决方案。</p>
<p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">output</span>: &#123;</div><div class="line">   <span class="attribute">path</span>: __dirname + <span class="string">'/build'</span>,</div><div class="line">   filename: <span class="string">'[bundle]-[chunkhash:6].js'</span></div><div class="line"> &#125;,</div></pre></td></tr></table></figure></p>
<p>output:
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[bundle]</span><span class="selector-tag">-6519c9</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure></p>
<h2 id="da-jian-jiao-shou-jia-xu-yao-jie-jue-de-wen-ti">搭建脚手架需要解决的问题</h2>
<ul>
<li>ES6支持</li>
<li>React JSX支持</li>
<li>css/scss/less支持</li>
<li>第三方例如jquery和fontawesome的支持</li>
<li>webpack-dev-server</li>
<li>热替换</li>
<li>自动刷新</li>
<li>局部自动刷新</li>
</ul>
<h2 id="gong-neng-biao-shi">功能标识</h2>
<p>项目中有些代码我们只为在开发环境（例如日志）或者是内部测试环境（例如那些没有发布的新功能）中使用，那就需要引入下面这些魔法全局变量（magic globals）：</p>
<p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">if</span> (__DEV__) &#123;</div><div class="line">  <span class="selector-tag">console</span><span class="selector-class">.warn</span>(<span class="string">'Extra logging'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="selector-tag">if</span> (__PRERELEASE__) &#123;</div><div class="line">  <span class="selector-tag">showSecretFeature</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同时还要在webpack.config.js中配置这些变量，使得webpack能够识别他们。
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"></div><div class="line"><span class="comment">// definePlugin 会把定义的string 变量插入到Js代码中。</span></div><div class="line"><span class="keyword">var</span> definePlugin = <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">  <span class="attr">__DEV__</span>: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(process.env.BUILD_DEV || <span class="string">'true'</span>)),</div><div class="line">  <span class="attr">__PRERELEASE__</span>: <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(process.env.BUILD_PRERELEASE || <span class="string">'false'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [definePlugin]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>配置完成后，就可以使用 BUILD_DEV=1 BUILD_PRERELEASE=1 webpack来打包代码了。 值得注意的是，webpack -p 会删除所有无作用代码，也就是说那些包裹在这些全局变量下的代码块都会被删除，这样就能保证这些代码不会因发布上线而泄露。</p>
<h2 id="webpack-dev-server-1">Webpack-dev-server</h2>
<p>webpack-dev-server 是运行在<code>内存中</code>的，所以不会像执行webpack一样，编译出真实的文件</p>
<h2 id="source-maps">SourceMaps</h2>
<h2 id="hot-module-replacement">Hot Module Replacement</h2>
<p>热模块替换改变，添加，移除模块而不需要页面的刷新
使用<strong>webpack-dev-server</strong> 有两种方式打开HMR
方法1：在命令行中加入 <code>--hot</code>和 <code>--inine</code>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">webpack</span><span class="literal">-</span><span class="comment">dev</span><span class="literal">-</span><span class="comment">server</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">hot</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">inline</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>--hot</code> 自动添加HotModuleReplacementPlugin插件</li>
<li><code>--inline</code> 将webpack-dev-server运行时嵌入到bundle中</li>
</ul>
<p>注意：在命令行中指定<code>--hot</code>参数，这种开启方式只适合inline模式，也就是说，你必须同时结合inline模式使用：<code>webpack-dev-server --inline --hot</code>。</p>
<p>方法2：修改webpack.config.js文件</p>
<ul>
<li>add new webpack.HotModuleReplacementPlugin() to the plugins field</li>
<li>add webpack/hot/dev-server and webpack-dev-server/client?http://localhost:8080 to the entry field</li>
</ul>
<p>Eg：
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: [</div><div class="line">    <span class="string">'webpack/hot/dev-server'</span>,</div><div class="line">    <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>,</div><div class="line">    <span class="string">'./index.js'</span></div><div class="line">  ],</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span>,</div><div class="line">    publicPath: <span class="string">'/static/'</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div><div class="line">  ],</div><div class="line">  <span class="keyword">module</span>: &#123;</div><div class="line">    loaders: [&#123;</div><div class="line">      test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">      exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      loader: <span class="string">'babel-loader'</span>,</div><div class="line">      query: &#123;</div><div class="line">        presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]</div><div class="line">      &#125;,</div><div class="line">      include: path.join(__dirname, <span class="string">'.'</span>)</div><div class="line">    &#125;]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="zi-dong-shua-xin">自动刷新</h2>
<p>webpack-dev-server支持两种模式的自动刷新。</p>
<p><strong>iframe模式</strong></p>
<p>使用iframe模式并不需要多余的配置，直接访问http://[host]:[port]/webpack-dev-server/[path]即可，iframe模式的特征如下：</p>
<blockquote>
<p>✦ 无需额外的配置</p>
</blockquote>
<blockquote>
<p>✦ 顶部条可以显示编译信息</p>
</blockquote>
<blockquote>
<p>✦ 浏览器的地址不会跟着页面URL变动</p>
</blockquote>
<p><strong>inline模式</strong></p>
<p>简单配置可以开启，然后直接访问http://[host]:[port]/[path]即可，inline模式的特征如下：</p>
<blockquote>
<p>✦ 需要额外的配置</p>
</blockquote>
<blockquote>
<p>✦ 编译信息只能在命令行和浏览器console中查看</p>
</blockquote>
<blockquote>
<p>✦ 浏览器的地址和页面URL同步</p>
</blockquote>
<p>前文提到的简单配置到底有多简单呢？如下两种方式均可：</p>
<ul>
<li>➙ 在命令行中指定<code>--inline</code>参数，比如：<code>webpack-dev-server --inline</code></li>
<li>➙ 在webpack.config.js配置文件中添加devServer: {inline: true}</li>
</ul>
<h2 id="wen-ti">问题</h2>
<h3 id="bu-neng-zi-dong-shua-xin">不能自动刷新</h3>
<p>场景：发现一个问题就是在一个项目中的是可以自动刷新的，但是相同的代码在另一个项目中就不能自动的刷新
分析：起初以为是代码的问题，结果尝试将两个代码的配置项改为相同的还是不行，尝试无果，在论坛上发现有人是因为在osx
（mac）上的文件夹的名字大写导致的，所以尝试将项目的文件夹的名字更改
解决：更改不能work的文件夹的名字为简单的英文即可，很坑。</p>
<h3 id="tian-jia-di-san-fang-yi-lai-shi-bai">添加第三方依赖失败</h3>
<p>场景：尝试在webpack中添加jquery，参考了官网的写法但是一直不能work
分析：
解决：将webpack的config的文件中的entry中的vendor的值由 string 改为 array即可</p>
<h2 id="xue-xi-zi-liao">学习资料</h2>
<p>视频：</p>
<p>书：</p>
<ul>
<li>Webpack 中文指南 http://zhaoda.net/webpack-handbook/</li>
</ul>
<h2 id="can-kao-zi-liao">参考资料</h2>
<p>官网：http://webpack.github.io/docs/</p>
<p>文章：</p>
<ul>
<li>WebPack实例与前端性能优化：https://segmentfault.com/a/1190000004577578</li>
<li>WEBPACK DEV SERVER：http://www.jianshu.com/p/b95bbcfc590d</li>
<li>http://www.infoq.com/cn/articles/react-and-webpack/</li>
<li>https://rhadow.github.io/2015/05/30/webpack-loaders-and-plugins/</li>
</ul>
<p>代码：
阮一峰webpack-demo：https://github.com/ruanyf/webpack-demos</p>
<p>库：
自己实现的：https://github.com/sialvsic/webpack-demo</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[将docker镜像部署到AWS并运行]]></title>
      <url>http://yoursite.com/2016/11/17/docker-aws/</url>
      <content type="html"><![CDATA[<h1 id="ru-he-jiang-docker-jing-xiang-bu-shu-dao-aws-shang-bing-yun-xing">如何将docker镜像部署到AWS上并运行</h1>
<p><code>workflow</code></p>
<p>1.利用sinatra启动本地的web server提供web服务</p>
<p>2.安装docker服务</p>
<p>3.将sinatra提供的websever安装到docker中</p>
<p>4.本地设置端口映射调试</p>
<p>5.注册AWS，部署docker镜像并运行</p>
<hr>
<h2 id="step-1-li-yong-sinatra-qi-dong-ben-di-de-webserver-ti-gong-web-fu-wu">step1 利用sinatra启动本地的webserver提供web服务</h2>
<blockquote>
<p>sinatra 的官网为：http://www.sinatrarb.com/</p>
</blockquote>
<blockquote>
<p>sinatra 的github网址为：https://github.com/sinatra/sinatra</p>
</blockquote>
<p>文档很详细，启动一个web 的服务只需要：</p>
<p>新建一个ruby的文件，命名为myapp.rb，代码如下
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># myapp.rb</span></div><div class="line"><span class="built_in">require</span> <span class="string">'sinatra'</span></div><div class="line"></div><div class="line"><span class="built_in">get</span> <span class="string">'/'</span> <span class="built_in">do</span></div><div class="line">  <span class="string">'Hello world!'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>Install the gem:
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem <span class="keyword">install</span> sinatra</div></pre></td></tr></table></figure></p>
<p>And run with:
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ruby</span> <span class="selector-tag">myapp</span><span class="selector-class">.rb</span></div></pre></td></tr></table></figure></p>
<p>View at: http://localhost:4567 (默认的端口，可以更改)即可，会看到页面上出现<code>Hello world!</code></p>
<p>Note: sinatra会提供路由的处理，本例只是一个最最简单的get方法的路由访问；
如果没有ruby和gem的命令，请参见google先安装ruby；</p>
<h2 id="step-2-an-zhuang-docker">step2 安装docker</h2>
<p>本机使用osx系统，所以打开docker官网 https://docs.docker.com/docker-for-mac/  直接下载dmg文件安装即可，安装详情请参考此文档 https://docs.docker.com/docker-for-mac/#/step-1-install-and-run-docker-for-mac</p>
<h2 id="step-3-jiang-sinatra-ti-gong-de-websever-an-zhuang-dao-docker-zhong">step3 将sinatra提供的websever安装到docker中</h2>
<p>思路：如何实现这步，首先我们需要建立一个Dockerfile，用于将执行的命令写入；之后需要新建一个docker image即可.</p>
<p>a.新建一个Dockerfile文件
内容如下：
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is a comment</span></div><div class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></div><div class="line"><span class="keyword">MAINTAINER</span> sialvsic &lt;sialvsic@outlook.com&gt;</div><div class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /run-docker</span></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /run-docker</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y ruby</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> gem install bundler</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> main.rb main.rb</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> Gemfile Gemfile</span></div><div class="line"><span class="keyword">COPY</span><span class="bash"> config.ru config.ru</span></div><div class="line"><span class="keyword">RUN</span><span class="bash"> bundle install</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">8081</span></div><div class="line"><span class="keyword">CMD</span><span class="bash"> rackup --host 0.0.0.0 -p 8081</span></div><div class="line"><span class="comment"># CMD ["bundle", "exec", "rackup", "--host", "0.0.0.0", "-p", "8081"]</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p><code>#</code> 注释</p>
</blockquote>
<blockquote>
<p>EXPOSE 表示显示的声明要导出的端口号</p>
</blockquote>
<blockquote>
<p>CMD 表示build时不运行，但是在容器执行时运行的命令</p>
</blockquote>
<p>新建好Dockerfile之后，执行命令
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t star:<span class="number">1</span>.<span class="number">0</span> .</div></pre></td></tr></table></figure></p>
<p>-t 表示；</p>
<p>. 表示当前路径；</p>
<p>执行docker images 命令会看到存在一个REPOSITORY 为star TAG为1.0的一条新的镜像，此时镜像已经build成功</p>
<h2 id="step-4-she-zhi-ben-di-duan-kou-ying-she">step4 设置本地端口映射</h2>
<p>我们清楚，docker 是运行在一个虚拟机中的，本质上也是一个小型的精简的linux系统，所以docker的镜像运行时只会在linux系统中打开一个8081端口，但是在当前的osx的系统中是没有办法访问的，所以需要配置端口映射，如何配置：仅需要在docker的镜像运行时指定-p参数，eg:
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker <span class="keyword">run</span><span class="bash"> <span class="_">-d</span> -p 7080:8081 star:1.0</span></div></pre></td></tr></table></figure></p>
<p>-d表示后台运行，7080代表hostport,8081代表docker内部的port号，
此时打开浏览器输入： localhost:7080 即可访问</p>
<h2 id="step-5-zhu-ce-aws-bu-shu-docker-jing-xiang-bing-yun-xing">step5 注册AWS，部署docker镜像并运行</h2>
<p>注册很简单，唯一注意的就是需要绑定信用卡</p>
<p>如何部署，Follow以下文档
https://aws.amazon.com/cn/getting-started/tutorials/deploy-docker-containers/</p>
<h2 id="chang-jian-ji-qiao">常见技巧</h2>
<h3 id="shan-chu-suo-you-de-docker-containers">删除所有的docker containers</h3>
<p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm $<span class="comment">(docker ps -a -q)</span></div></pre></td></tr></table></figure></p>
<h3 id="shan-chu-suo-you-de-docker-images">删除所有的docker images</h3>
<p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi <span class="variable">$(</span>docker images -q)</div></pre></td></tr></table></figure></p>
<h2 id="chang-jian-wen-ti">常见问题</h2>
<h3 id="wu-fa-shan-chu-jing-xiang">无法删除镜像</h3>
<p>场景：使用docker rmi 命令时出现以下提示
Error response from daemon: Conflict, cannot delete 91c95931e552 because the container 76068d66b290 is using it, use -f to force FATA[0000] Error: failed to remove one or more images</p>
<p>分析：因为镜像正在运行或者镜像间存在依赖</p>
<p>解决：加上-f 参数强制删除</p>
<h3 id="dont-run-bundler">Don't run Bundler···</h3>
<p>场景: docker build 时出现以下的提示
Don't run Bundler as root. Bundler can ask for sudo if it is needed, and
installing your bundle as root will break this application for all non-root
users on this machine.</p>
<p>分析：是一个错误警告，但不是一个错误，暂时还没有解决</p>
<p>解决：</p>
<h3 id="could-not-locate-gemfile-or-bundle-directory">Could not locate Gemfile or .bundle/ directory</h3>
<p>场景：运行docker build报错</p>
<p>分析：在书写Dockerfile的过程中，需要考虑到自己写的文件的位置，牵扯到运行问题。docker 提供COPY和ADD可以用于拷贝文件到docker虚拟机，但是存在docker的运行解析问题，可能会找不到文件</p>
<p>解决：使用 WORKDIR处理好</p>
<h3 id="yi-jing-pei-zhi-hao-liao-duan-kou-ying-she-dan-shi-ben-di-reng-ran-wu-fa-fang-wen">已经配置好了端口映射但是本地仍然无法访问</h3>
<p>场景：已经建立好了镜像，在运行镜像时尝试执行了以下命令均无效果
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">docker</span> <span class="selector-tag">run</span> <span class="selector-tag">-d</span> <span class="selector-tag">-p</span> <span class="selector-tag">localhost</span><span class="selector-pseudo">:7080</span><span class="selector-pseudo">:8081</span> <span class="selector-tag">star</span><span class="selector-pseudo">:1.0</span></div><div class="line"><span class="selector-tag">docker</span> <span class="selector-tag">run</span> <span class="selector-tag">-d</span> <span class="selector-tag">-p</span> 7080<span class="selector-pseudo">:8081</span> <span class="selector-tag">star</span><span class="selector-pseudo">:1.0</span></div><div class="line"><span class="selector-tag">docker</span> <span class="selector-tag">run</span> <span class="selector-tag">-d</span> <span class="selector-tag">-p</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7080</span><span class="selector-pseudo">:8081</span> <span class="selector-tag">star</span><span class="selector-pseudo">:1.0</span></div></pre></td></tr></table></figure></p>
<p>分析：看了文档觉得这些都是对的，一开始就很奇怪这样子为什么不对，早上无意间看了一下别人的问题试了一下解决了，但是还不是很清楚为什么加了这个参数就可以了。</p>
<p>解决：在Dockerfile的web运行时加入参数 --host 0.0.0.0</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mysql install uninstall and simple use]]></title>
      <url>http://yoursite.com/2016/08/28/mysql/</url>
      <content type="html"><![CDATA[<h1 id="mysql-install-uninstall-and-simple-use">Mysql install uninstall and simple use</h1>
<hr>
<h2 id="mac-xia-an-zhuang">MAC下安装</h2>
<h3 id="tui-jian-shi-yong-homebrew-an-zhuang">推荐使用homebrew安装</h3>
<p>执行下列安装命令</p>
<p>更新brew
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span> update</div></pre></td></tr></table></figure></p>
<p>安装mysql
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>mysql</div></pre></td></tr></table></figure></p>
<p>安装完之后会出现提示：
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">We<span class="comment">'ve installed your MySQL database without a root password. To secure it run: `mysql_secure_installation`</span></div><div class="line"><span class="keyword">To</span> connect run: `mysql -u root` <span class="keyword">To</span> have launchd start mysql at login:</div><div class="line">ln -sfv /usr/local/opt/mysql/*.plist ~/Library/LaunchAgents</div><div class="line"><span class="keyword">Then</span> <span class="keyword">to</span> load mysql now:</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</div><div class="line"><span class="keyword">Or</span>, <span class="keyword">if</span> you don<span class="comment">'t want/need launchctl, you can just run:</span></div><div class="line"></div><div class="line">mysql.server start</div></pre></td></tr></table></figure></p>
<p><code>此处仅为了解即可，建议不要执行以下该命令</code>
然后执行<strong>mysql_secure_installation</strong> 会出现</p>
<p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&gt; Securing <span class="keyword">the</span> MySQL server deployment.</div><div class="line">&gt;</div><div class="line">Connecting <span class="built_in">to</span> MySQL <span class="keyword">using</span> <span class="keyword">a</span> blank password.</div><div class="line">&gt;</div><div class="line">VALIDATE PASSWORD PLUGIN can be used <span class="built_in">to</span> test passwords</div><div class="line"><span class="keyword">and</span> improve security. It checks <span class="keyword">the</span> strength <span class="keyword">of</span> password</div><div class="line"><span class="keyword">and</span> allows <span class="keyword">the</span> users <span class="built_in">to</span> <span class="built_in">set</span> only those passwords which are</div><div class="line">secure enough. Would you like <span class="built_in">to</span> setup VALIDATE PASSWORD plugin?</div><div class="line">&gt;</div><div class="line">Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No: No</div><div class="line">Please <span class="built_in">set</span> <span class="keyword">the</span> password <span class="keyword">for</span> root here.</div><div class="line">&gt;</div><div class="line">New password:  Vaystar@<span class="number">0917</span></div><div class="line">&gt;</div><div class="line">Re-enter <span class="built_in">new</span> password:</div><div class="line">By default, <span class="keyword">a</span> MySQL installation has <span class="keyword">an</span> anonymous user,</div><div class="line">allowing anyone <span class="built_in">to</span> <span class="built_in">log</span> <span class="keyword">into</span> MySQL <span class="keyword">without</span> having <span class="built_in">to</span> have</div><div class="line"><span class="keyword">a</span> user account created <span class="keyword">for</span> them. This is intended only <span class="keyword">for</span></div><div class="line">testing, <span class="keyword">and</span> <span class="built_in">to</span> make <span class="keyword">the</span> installation go <span class="keyword">a</span> bit smoother.</div><div class="line">You should remove them <span class="keyword">before</span> moving <span class="keyword">into</span> <span class="keyword">a</span> production</div><div class="line">environment.</div><div class="line">&gt;</div><div class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No) : y</div><div class="line">Success.</div><div class="line">&gt;</div><div class="line">&gt;</div><div class="line">Normally, root should only be allowed <span class="built_in">to</span> connect <span class="built_in">from</span></div><div class="line"><span class="string">'localhost'</span>. This ensures that someone cannot guess <span class="keyword">at</span></div><div class="line"><span class="keyword">the</span> root password <span class="built_in">from</span> <span class="keyword">the</span> network.</div><div class="line">&gt;</div><div class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No) : N</div><div class="line"> ... skipping.</div><div class="line">By default, MySQL comes <span class="keyword">with</span> <span class="keyword">a</span> database named <span class="string">'test'</span> that</div><div class="line">anyone can access. This is also intended only <span class="keyword">for</span> testing,</div><div class="line"><span class="keyword">and</span> should be removed <span class="keyword">before</span> moving <span class="keyword">into</span> <span class="keyword">a</span> production</div><div class="line">environment.</div><div class="line">&gt;</div><div class="line">&gt;</div><div class="line">Remove test database <span class="keyword">and</span> access <span class="built_in">to</span> <span class="keyword">it</span>? (Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No) : y</div><div class="line"> -Dropping test database...</div><div class="line">Success.</div><div class="line">&gt;</div><div class="line"> -Removing privileges <span class="keyword">on</span> <span class="title">test</span> <span class="title">database</span>...</div><div class="line">Success.</div><div class="line">&gt;</div><div class="line">Reloading <span class="keyword">the</span> privilege tables will ensure that all changes</div><div class="line">made so far will take effect immediately.</div><div class="line">&gt;</div><div class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, <span class="keyword">any</span> other key <span class="keyword">for</span> No) : y</div><div class="line">Success.</div><div class="line">&gt;</div><div class="line">All done!</div><div class="line"></div><div class="line">到此安装完毕，使用时输入mysql -u root -p 的命令即可，输入密码</div><div class="line">我的密码为:  安装于`<span class="number">2016.8</span><span class="number">.26</span>`</div><div class="line"></div><div class="line">Vaystar@<span class="number">0917</span></div></pre></td></tr></table></figure></p>
<h3 id="chu-xian-de-wen-ti">出现的问题</h3>
<h4 id="cli-xia-shu-ru-my-sql-command-not-found">CLI下输入MySQL command not found</h4>
<p>问题分析：环境变量设置不对
解决方法：
在.zshrc 中写入，之后source一下即可。</p>
<p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/usr/local/mysql/bin</span></div></pre></td></tr></table></figure></p>
<h3 id="zi-ji-chang-shi-de-cuo-wu">自己尝试的错误</h3>
<p>开始在官网上下载dmg 的安装包，正常安装后出现下列问题
http://stackoverflow.com/questions/33326065/unable-to-access-mysql-after-it-automatically-generated-a-temporary-password
mysql会自动的生成一个random password，但你在使用<strong>mysql -u root -p</strong> 后输入该随机的密码时又会出错，在网上找了各种方法无果。
所以，</p>
<blockquote>
<p>mac下安装不推荐使用dmg安装</p>
</blockquote>
<p>遂之后使用  brew install mysql 安装，开始有些冲突，最后莫名其妙的好了，也是醉了。</p>
<h2 id="mac-xia-xie-zai">MAC下卸载</h2>
<p>1.关闭mysql服务</p>
<p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql<span class="selector-class">.server</span> stop</div></pre></td></tr></table></figure></p>
<p>2.依次执行以下命令</p>
<p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">rm</span> /usr/<span class="keyword">local</span>/mysql   </div><div class="line">sudo <span class="keyword">rm</span> -rf /usr/<span class="keyword">local</span>/mysql*</div><div class="line">sudo <span class="keyword">rm</span> -rf /Library/StartupItems/MySQLCOM</div><div class="line">sudo <span class="keyword">rm</span> -rf /Library/PreferencePanes/My*</div><div class="line"><span class="keyword">rm</span> -rf ~/Library/PreferencePanes/My*</div><div class="line">sudo <span class="keyword">rm</span> -rf /Library/Receipts/mysql*</div><div class="line">sudo <span class="keyword">rm</span> -rf /Library/Receipts/MySQL*</div><div class="line">sudo <span class="keyword">rm</span> -rf /private/<span class="keyword">var</span>/<span class="keyword">db</span>/receipts<span class="comment">/*mysql*</span></div><div class="line">sudo rm -rf /var/db/receipts/com.mysql.</div><div class="line">调用vim /etc/hostconfig，删除 MYSQLCOM=-YES-这一行。</div></pre></td></tr></table></figure></p>
<p>3.在根目录下执行以下命令 查找依旧存在的mysql  并删除 千万别乱删，容易出事
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">find</span> . mysql | <span class="keyword">grep</span> mysql</div></pre></td></tr></table></figure></p>
<p>可以删除</p>
<ul>
<li>/usr/local/var/mysql  整个文件</li>
<li>/usr/local/share/mysql</li>
<li>/usr/local/Cellar/mysql  整个文件</li>
</ul>
<p><code>Note:</code> 可能会发现以上的命令在执行时根本不存在或者没有该文件，是因为mysql 的版本不同导致。</p>
<p>参考链接</p>
<p>1.stackoverflow：http://stackoverflow.com/questions/1436425/how-do-you-uninstall-mysql-from-mac-os-x</p>
<p>2.http://www.jb51.net/article/81447.htm</p>
<p>日志：
2016.8.28</p>
<p>使用brew install mysql  ，但是手贱执行mysql_secure_installation，并设置了中级难度的root密码，结果发现在跑黑工项目时，默认的root密码是空，我就GG了，其实改一下项目的配置文件就好了，但是强迫症 + 完美主义患者是不喜欢凑合的，所以研究了一下如何卸载重装mysql</p>
<h2 id="how-to-start-run-and-stop">How to start run and stop</h2>
<p>Usage: mysql.server  {start|stop|restart|reload|force-reload|status}  [ MySQL server options ]</p>
<blockquote>
<p>mysql.server start</p>
</blockquote>
<blockquote>
<p>mysql.server stop</p>
</blockquote>
<blockquote>
<p>mysql.server restart</p>
</blockquote>
<blockquote>
<p>mysql.server status</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java 基础]]></title>
      <url>http://yoursite.com/2016/08/23/java-basic/</url>
      <content type="html"><![CDATA[<h1 id="java-basic">Java Basic</h1>
<hr>
<h2 id="what-is-java">what is java?</h2>
<p>Java 编程语言是个简单、完全面向对象、分布式、解释性、健壮、安全与系统无关、可移植、高性能、多线程和动态的编程语言，Java可以撰写跨平台应用软件</p>
<ul>
<li>java EE</li>
<li>java ME</li>
<li>java SE</li>
</ul>
<h2 id="why-use-java">why use java?</h2>
<ul>
<li>面向对象的设计思想</li>
<li>垃圾自动回收机制</li>
</ul>
<h2 id="when-to-use-java">when to use java?</h2>
<h2 id="where-to-use-java">where to use java?</h2>
<h2 id="who-create-java">who create java?</h2>
<h2 id="how-to-use-java">how to use java?</h2>
<h2 id="java-de-gong-zuo-fang-shi">java 的工作方式</h2>
<p>1.源代码  -&gt;  2.编译器  -&gt;  3.输出 -&gt; 4.java 虚拟机</p>
<ol>
<li>编写源码文件</li>
<li>用编译器运行源代码同时检查错误，如果存在错误就会报错</li>
<li>编译器会产生字节码。 字节码与平台无关</li>
<li>通过java 的虚拟机可以运行字节码</li>
</ol>
<p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">编译器可以使用<span class="keyword">javac命令</span></div><div class="line">虚拟机可以使用<span class="keyword">java命令</span></div></pre></td></tr></table></figure></p>
<h2 id="java-history">java history</h2>
<ul>
<li>java 1.02</li>
<li>java 1.1</li>
<li>java 2 version 1.2 ~ 1.4</li>
<li>java 5 version 1.5</li>
</ul>
<p>tip：因为销售人员所以没有java 3 或4</p>
<h2 id="he-xin-gai-nian">核心概念</h2>
<p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">JDK </span>  (<span class="keyword">java </span>Development Kit)          <span class="keyword">java </span>软件开发包</div><div class="line"><span class="keyword">JRE </span>  (<span class="keyword">java </span>Runtime Envirment)</div><div class="line"><span class="keyword">JVM </span> (<span class="keyword">java </span>virtual machine)</div><div class="line"></div><div class="line"><span class="keyword">JDK </span>包含 <span class="keyword">JRE </span>包含 <span class="keyword">JVM</span></div></pre></td></tr></table></figure></p>
<h2 id="ji-chu-dai-ma">基础代码</h2>
<p>main 函数</p>
<p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MyfirstApp.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyfirstApp</span> &#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello world!!"</span>);</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>过程：</p>
<p>1.先使用javac 命令，生成一个MyfirstApp.class的字节码文件</p>
<p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">javac</span> <span class="selector-tag">MyfirstApp</span><span class="selector-class">.java</span></div></pre></td></tr></table></figure></p>
<p>2.使用java命令，<code>此处不需要指定后缀</code> 此命令执行的是含有main函数的class</p>
<p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">java MyfirstApp</span></div></pre></td></tr></table></figure></p>
<p>注意：</p>
<ul>
<li>文件名应该和类名一样</li>
<li>每个语句必须有；号</li>
<li>字符串使用双引号</li>
<li>while()  括号中不能为int 型   只能为boolean类型  可以写成 while(x==4)</li>
<li>main函数可以出现任意一个名字的类中，但是只能有一个main函数</li>
<li>java 是一种强类型语言，所以特别要注意数据类型</li>
</ul>
<h2 id="mian-xiang-dui-xiang">面向对象</h2>
<h3 id="you-shi">优势</h3>
<ul>
<li>使用自然的方法设计</li>
<li>加入新功能时不会影响已有的代码</li>
<li>类可以复用</li>
</ul>
<p>面向对象的设计
思想：专注于程序中出现的事物而不是过程。</p>
<h2 id="lei-he-dui-xiang">类和对象</h2>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">类</div><div class="line">类是对象的蓝图</div><div class="line"></div><div class="line">对象</div><div class="line">对象本身已知的事物被称为： 实例变量（状态）</div><div class="line">对象可以实行的动作被称为：方法（行为）</div></pre></td></tr></table></figure></p>
<h2 id="mian-xiang-dui-xiang-de-te-xing">面向对象的特性</h2>
<h3 id="ji-cheng">继承</h3>
<p>覆盖 override</p>
<blockquote>
<p>什么时候用继承？
判断 Is-A 的关系
Note： Is-A的关系是一个单向先下的关系！</p>
</blockquote>
<p>合理的继承设计是可以通过 Is-A 的层级检测的</p>
<p>如果在子类中打算引用父类的方法，然后再加上额外的行为时，可以按照如下的方式</p>
<p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pulic void <span class="keyword">run</span><span class="bash">()&#123;</span></div><div class="line">    super.run();</div><div class="line">    // <span class="keyword">add</span><span class="bash"> your special action</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>当你定义出一组类的父型时，你可以用子类型的任何类来填补任何需要或期待的父型位置</p>
</blockquote>
<h3 id="duo-tai">多态</h3>
<p>运用多态时，引用类型可以是实际对象类型的父型
eg：
有一个Dog 类和 Animal类，Dog类是Animal 的子类，在新建对象时可以这么建立</p>
<pre><code>Animal dog = new Dog(); 
</code></pre>
<p>多态可以运用在参数多态和返回值多态，详见P187页（head first java）</p>
<h4 id="fu-gai-override">覆盖 (override)</h4>
<p>覆盖的要求：</p>
<ul>
<li>参数一样，返回类型兼容</li>
<li>不能降低方法的存储权限</li>
</ul>
<h4 id="zhong-zai-overload">重载（overload）</h4>
<p>重载是两个方法的方法名字相同，但参数不同</p>
<blockquote>
<p>重载与多态无关</p>
</blockquote>
<p>重载的要求</p>
<ul>
<li>返回类型不同</li>
<li>不能只改变返回类型</li>
<li>可以更改存取权限</li>
</ul>
<h3 id="feng-zhuang">封装</h3>
<h2 id="cun-chu-quan-xian">存储权限</h2>
<h2 id="yu-fa">语法</h2>
<h3 id="shu-zu-ding-yi">数组定义</h3>
<p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String <span class="string">[]</span> arr = &#123;<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>&#125;;</div><div class="line">int <span class="string">[]</span> nums = new int<span class="string">[7]</span>;</div><div class="line">Dog <span class="string">[]</span> pets = new Dog<span class="string">[7]</span>;</div></pre></td></tr></table></figure></p>
<p>虽然元素本身是primitive主数据类型，但是<code>数组却是一个对象</code></p>
<h3 id="final-biao-shi-fu">final 标识符</h3>
<p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span>标志符用于标识为一个继承树的末端，不能被继承</div><div class="line"><span class="keyword">final</span> 标志整个类说明整个类的方法都不能被继承</div><div class="line"><span class="keyword">final</span> 标志一个方法说明这个方法不能被覆盖</div></pre></td></tr></table></figure></p>
<h3 id="abstract-biao-zhi-fu">abstract 标志符</h3>
<p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> 标志符用于说明抽象的事物</div><div class="line"><span class="keyword">abstract</span> 标志整个类说明该类是一个抽象类</div><div class="line"><span class="keyword">abstract</span> 标志一个方法说明一个方法是一个抽象方法，该方法一定是要被覆盖的</div></pre></td></tr></table></figure></p>
<h2 id="bian-liang">变量</h2>
<p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">变量定义规则：</div><div class="line"><span class="keyword">rule</span> <span class="number">1</span>：</div><div class="line">变量必须拥有类型</div><div class="line"><span class="keyword">rule</span> <span class="number">2</span>：</div><div class="line">变量必须有名称</div><div class="line"></div><div class="line">变量分为两种： </div><div class="line"><span class="keyword">primitive</span><span class="title"> 和 引用类型</span></div><div class="line">primitive类型：</div></pre></td></tr></table></figure></p>
<p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">`boolean`    <span class="literal">true</span> <span class="literal">or</span> <span class="literal">false</span></div><div class="line">`char`   <span class="number">16</span> bits   <span class="number">0</span> ~ <span class="number">65535</span>    定义时使用单引号</div><div class="line">`byte`   <span class="number">8</span> bits  -<span class="number">128</span>-<span class="number">127</span></div><div class="line">`short`   <span class="number">16</span> bits -<span class="number">32768</span>-<span class="number">32767</span></div><div class="line">`int`   <span class="number">32</span> bits -<span class="number">2147483648</span>-<span class="number">2147483647</span></div><div class="line">`long`  <span class="number">64</span> bits </div><div class="line">`float`  <span class="number">32</span>bits</div><div class="line">`double`  <span class="number">64</span>bits</div></pre></td></tr></table></figure></p>
<p>变量命名规则：</p>
<ul>
<li>名称必须以字母、下划线或$开头，不能用数字开头</li>
<li>避开java 的关键字</li>
</ul>
<p>引用类型：</p>
<ul>
<li>没有对象变量这种东西</li>
<li>只有引用到对象的变量</li>
<li>对象引用变量保存的是存取对象的方法</li>
<li>他并不是对象的容器，而是类似指向对象的指针。或者说是地址</li>
</ul>
<p>注意：
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Dog dog = <span class="keyword">new</span> Dog();</div><div class="line">System.<span class="keyword">out</span>.println(dog);   <span class="comment">//Dog@7852e922 显然 dog 的值类似于指针的存储的真正的对象的地址  他本身是个引用</span></div><div class="line"></div><div class="line">Dog a = <span class="literal">null</span>;   <span class="comment">//这样是允许的</span></div><div class="line"></div><div class="line">Dog b = dog；  </div><div class="line">System.<span class="keyword">out</span>.println(b);   </div><div class="line"><span class="comment">//Dog@7852e922   它的值和 dog 本身的值是一样的，因为引用的是同一个对象</span></div></pre></td></tr></table></figure></p>
<h2 id="fang-fa">方法</h2>
<p>Java 的方法中的参数是值传递，并不是引用传递</p>
<p>对于简单类型（primitive）主类型数据而言： 形参是对实参的拷贝
对于对象类型而言： 实质上传入的是远程控制的拷贝</p>
<h2 id="shu-ju-yin-cang">数据隐藏</h2>
<p>要将程序从不良数据改成可以保护数据并且让你还能修改数据的方式是简单的，使用getter 和setter 即可</p>
<p>将实例变量标记为private
将getter和setter 设置为public</p>
<h2 id="shu-ju-chu-shi-hua">数据初始化</h2>
<p><code>实例变量</code>是存在默认值的，局部变量是没有默认值的</p>
<p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">integers  <span class="number">0</span></div><div class="line">floating points <span class="number">0.0</span></div><div class="line">booleans <span class="literal">false</span></div><div class="line">reference  <span class="literal">null</span></div></pre></td></tr></table></figure></p>
<p>注意： String 的初始化为 null</p>
<h2 id="bian-liang-bi-jiao">变量比较</h2>
<p>primitive 类型的数据使用 == 进行比较</p>
<p>如果是对象比较的话 需要使用equals()方法</p>
<h2 id="nei-zhi-dui-xiang-de-shi-yong">内置对象的使用</h2>
<p>ArrayList</p>
<ul>
<li>add</li>
<li>remove</li>
<li>contains</li>
<li>isEmpty</li>
<li>indexOf</li>
<li>size</li>
<li>get</li>
</ul>
<p>ArrayList  不能存储primitive类型，但是可以存储<code>类类型</code>
注意ArrayList 需要导入</p>
<p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> java.util.ArrayList;</div><div class="line">   </div><div class="line">   ArrayList&lt;<span class="keyword">int</span>&gt; arr = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>&gt;();    <span class="comment">//error</span></div><div class="line">ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div></pre></td></tr></table></figure></p>
<h2 id="java-package-bao">java package 包</h2>
<p>在java 的API中，类是被包装在包中的，要使用API中的类，你必须知道它被放在了哪个包中。</p>
<p>除了java.lang 包外，其余的所有的java 包都需要在使用时(import)导入 或者使用全称
如何导入包</p>
<blockquote>
<p>import java.util.ArrayList</p>
</blockquote>
<p>包的意义：</p>
<ul>
<li>帮助组织项目</li>
<li>制造出命名空间，避免类的冲突</li>
<li>限制同一命名空间下的类才能相互存取</li>
</ul>
<p>java 的命名包的传统</p>
<h2 id="jie-kou">接口</h2>
<p>是一个100%的抽象类,</p>
<p>有些类不应该被初始化，不能被new 出来创造出该类的实例</p>
<p>抽象类是必须被继承的
抽象方法是必须要被覆盖的</p>
<p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Canine</span> <span class="keyword">extends</span> <span class="title">Animal</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口的定义：
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pet</span> </span>&#123; ...&#125;</div></pre></td></tr></table></figure></p>
<p>接口的实现：
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Canine</span> <span class="title">implements</span> <span class="title">Pet</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure></p>
<p>extend 只能有一个，但是implement 可以有多个</p>
<p>实现某接口的类必须实现它所有的方法</p>
<h2 id="dui-xiang-de-qian-shi-jin-sheng">对象的前世今生</h2>
<blockquote>
<p>对象有生有死</p>
</blockquote>
<h3 id="java-de-dui-yu-zhan">java 的堆与栈</h3>
<p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">java中使用了两种内存区域： </span>堆与栈</div><div class="line">堆：对象的生存空间</div><div class="line">栈：方法调用及变量的生存空间</div><div class="line"></div><div class="line">堆上存储：对象；实例变量；</div><div class="line">当一个新建对象带有对象引用的变量时，会在堆上存储这个引用类型的变量的空间</div><div class="line">栈上存储：局部变量；方法调用；对象的引用；</div></pre></td></tr></table></figure></p>
<h3 id="gou-zao-han-shu">构造函数</h3>
<p>构造函数的要求：</p>
<ul>
<li>没有返回值</li>
<li>名称与类名一致</li>
<li>如果你自己写了一个传参的构造函数，那么无参的构造函数也必须自己写</li>
</ul>
<p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Car</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="comment">//构造函数</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>构造函数不会被继承</p>
<p>构造函数链
如果新建（new）一个继承的类的对象时，父类的构造函数是被依次执行的</p>
<p>实践：如果要在构造对象时传入参数，那么最好写两个构造函数以适应传参和不传参两种情况</p>
<p>如何调用父类的构造函数 <code>super()</code>，当然如果没写，编译器会帮我们自动加上的
<strong>this</strong>可以使用this()来从某个构造函数调用同一个类的另外一个构造函数；
this()只能用在构造函数中，且必须在第一行语句中。
super和this不能兼得</p>
<h2 id="jing-tai-fang-fa-he-fei-jing-tai-fang-fa">静态方法和非静态方法</h2>
<p>方法名前加入static关键字，申明这个方法的调用不需要实例对象
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">静态的方法不能调用非静态的变量</div><div class="line">静态的方法也不能调用非静态的方法</div></pre></td></tr></table></figure></p>
<p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">非静态的方法可以调用静态的变量</div><div class="line">非静态的方法可以调用静态的方法</div></pre></td></tr></table></figure></p>
<h2 id="jing-tai-bian-liang">静态变量</h2>
<p>静态变量被所有的实例对象所共享</p>
<h2 id="final">final</h2>
<p>静态的final变量是常数，初始化后不能被改变
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="literal">PI</span> = <span class="number">3.1415926</span>;</div></pre></td></tr></table></figure></p>
<p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> 的变量代表你不能改变它的值；</div><div class="line"><span class="keyword">final</span> 的方法代表你不能覆盖掉该方法；</div><div class="line"><span class="keyword">final</span> 的类代表你不能继承该类；</div></pre></td></tr></table></figure></p>
<h2 id="auto-boxing">AutoBoxing</h2>
<p>每一个primitive主类型数据都有一个包装用的类
类名为：</p>
<ul>
<li>Boolean</li>
<li>Character</li>
<li>Byte</li>
<li>Short</li>
<li>Integer</li>
<li>Long</li>
<li>Float</li>
<li>Double</li>
</ul>
<p>包装与分开包装</p>
<p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//包装</span></div><div class="line"><span class="keyword">int</span> i = <span class="number">128</span>;</div><div class="line">Interer iWrap = <span class="keyword">new</span> Interger(i);</div><div class="line"><span class="comment">//分开包装</span></div><div class="line"><span class="keyword">int</span> unWrapped = iWrap.intValue()；</div></pre></td></tr></table></figure></p>
<h2 id="intellij-idea-de-kuai-jie-jian">Intellij IDEA的快捷键</h2>
<ul>
<li>option  + Enter  快速导包</li>
</ul>
<h2 id="jing-yan">经验</h2>
<p>1.如何防止一个类被初始化？</p>
<ul>
<li>设置该类为抽象类</li>
<li>或设置该类的构造函数为私有</li>
</ul>
<p>2.类型转换
String 转换为 primitive类型 ：</p>
<blockquote>
<p>Integer.parseInt(&quot;4536.4864&quot;)
Double.parseDouble(&quot;420.20&quot;)</p>
</blockquote>
<p>primitive转换为String类型</p>
<blockquote>
<p>X.toString()</p>
</blockquote>
<p>3.数字的格式化</p>
<p>使用String 的format方法
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String s = String.format("%,f", 10000000.124);</div><div class="line">常用的：</div><div class="line"><span class="tag">%<span class="selector-tag">d</span></span></div><div class="line"><span class="tag">%<span class="selector-tag">f</span></span>  %.2f  %,.2f</div><div class="line"><span class="tag">%<span class="selector-tag">x</span></span></div><div class="line"><span class="tag">%<span class="selector-tag">c</span></span></div></pre></td></tr></table></figure></p>
<p>4.日期格式化
使用String 的format方法
<figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml">String.format("xx",new Date());</span></div><div class="line">xx 常用的：</div><div class="line"><span class="perl">%tc 完整的日期与时间：   Sun Nov <span class="number">28</span> <span class="number">14</span>:<span class="number">52</span>:<span class="number">41</span> MST <span class="number">2016</span></span><span class="xml"></span></div><div class="line"><span class="perl">%tr 只有时间 <span class="number">03</span>：<span class="number">01</span>：<span class="number">47</span> PM</span><span class="xml"></span></div><div class="line"><span class="perl">%tA， %tB %td  周、月、日  Sunday，november <span class="number">28</span></span><span class="xml"></span></div></pre></td></tr></table></figure></p>
<p>5.如何处理时间
在java中处理时间使用的是继承过的Calendar 的对象
eg：
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">Calendar</span> cal  = <span class="function"><span class="keyword">new</span> <span class="title">Calendar</span>();     <span class="comment">//error   因为Calendar是一个抽象类</span></span></div><div class="line"><span class="title">Calendar</span> <span class="title">cal</span>  = <span class="title">Calendar</span>.<span class="title">getInstance</span>();</div></pre></td></tr></table></figure></p>
<h2 id="chang-shi">常识</h2>
<p>1.构造函数不能被标记为是静态的
2.构造函数是在静态变量的初始化之后进行的</p>
<h2 id="temp">Temp</h2>
<p>java的简写：</p>
<p>sout   -&gt; System.out.print()</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建个人博客（一）]]></title>
      <url>http://yoursite.com/2016/08/18/how-to-create-blog-1/</url>
      <content type="html"><![CDATA[<h1 id="da-jian-ge-ren-bo-ke-yi">搭建个人博客（一）</h1>
<p><strong>前言</strong></p>
<p>作为一个程序员，平时有一些好的想法，或者笔记想要记录；虽然有很多不错的网站，比如博客园，CSDN······· 但作为一个支持开源的用户，和一个技术控，怎能没有一个自己的博客呢？幸运的是，因为公司要求写一篇Markdown语法的博客，就想着索性自己搭一个博客吧。so，利用这两天的时间，在网上看了很多的教程，又在自己的不断摸索下，终于尝试成功了，搭建了一个github + hexo + 自己域名 + Next 主题 的一个博客</p>
<p>地址：</p>
<blockquote>
<p>Alvin-blog <a href="http://sialvsic.com" target="_blank" rel="external">http://sialvsic.com</a></p>
</blockquote>
<p><strong>感想</strong></p>
<p>想想发现，确实有很多的博客写的不错，但是因为时间的缘故，技术的更新和网址的变更带来很多的问题，而且博文的水平参差不齐，我看的第一篇文章就是带有错误的文章，很可能一个小小的命令的错误就会带给读者很大的困惑，感觉博主也应该对此负责，时常的更新或者有一些提醒；综上，想分享一下我的过程，希望能够给读者带来一些帮助。</p>
<p><strong>声明</strong></p>
<p>本文适合</p>
<ul>
<li>linux和mac的用户，对windows的用户有一定的参考价值</li>
<li>有一定基础的人员参考，对于0基础人员权当是学习一下</li>
</ul>
<p><strong>前提</strong></p>
<ul>
<li>git</li>
<li>github 特别是gh-pages</li>
<li>markdown</li>
</ul>
<p><strong>START</strong></p>
<p>我会分阶段逐步完成整个过程，希望大家可以边看边完成</p>
<p><strong>ToDoList</strong></p>
<ul>
<li><strong>安装npm</strong></li>
<li><strong>利用hexo搭建本地博客</strong></li>
<li><strong>在GitHub上发布博客</strong></li>
<li><strong>购买域名</strong></li>
<li><strong>用自己的域名关联博客</strong></li>
<li><strong>优化hexo博客</strong></li>
</ul>
<hr>
<h2 id="zhi-shi-jian-jie">知识简介</h2>
<h3 id="git-hub-jian-jie">GitHub简介</h3>
<blockquote>
<p><strong>GitHub</strong> is a Web-based Git repository hosting service。    —— <a href="https://github.com/" target="_blank" rel="external">GitHub</a></p>
</blockquote>
<p>即：GitHub就是一个基于Web的托管服务，当然GitHub的功能不单单有这些。</p>
<h3 id="git-hub-pages-jian-jie">GitHub Pages 简介</h3>
<blockquote>
<p><strong>GitHub Pages</strong> 本用于介绍托管在 GitHub 的项目， 不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。    — <a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a></p>
</blockquote>
<p>GitHub Pages可以被认为是用户编写的、托管在github上的静态网页。</p>
<p><img src="http://obqvt6b56.bkt.clouddn.com/blog-githubPages.jpg" alt="Alt text"></p>
<h3 id="hexo-jian-jie">Hexo简介</h3>
<blockquote>
<p>快速、简洁且高效的博客框架    —— <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo</a></p>
</blockquote>
<p><img src="http://obqvt6b56.bkt.clouddn.com/hexo.png" alt="Alt text"></p>
<h2 id="an-zhuang-bi-bei-ruan-jian">安装必备软件</h2>
<p>可以参考 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">https://hexo.io/zh-cn/docs/</a> 安装下列两个软件</p>
<h3 id="1-an-zhuang-npm">1.安装Npm</h3>
<blockquote>
<p>npm — a package manager for javascript：node 的包管理器</p>
</blockquote>
<p>github:  https://github.com/npm/npm</p>
<p>官网：https://www.npmjs.com/</p>
<p>对于Linux和Mac 的用户直接点开上面的github的地址，执行<code>Fancy Install (Unix)</code>中的命令即可</p>
<p>实质上安装完node.js后会带有npm，所以可以按照官网的方式安装node.js即可</p>
<h3 id="2-an-zhuang-a-href-http-git-scm-com-git-a">2.安装<a href="http://git-scm.com/" target="_blank" rel="external">Git</a></h3>
<p>建议使用包管理器来安装
Linux:<br>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-<span class="keyword">get</span> install git</div></pre></td></tr></table></figure></p>
<p>Mac：
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</div></pre></td></tr></table></figure></p>
<h2 id="li-yong-hexo-da-jian-ben-di-bo-ke">利用hexo搭建本地博客</h2>
<h3 id="an-zhuang-hexo">安装hexo</h3>
<p>安装hexo
所有必备的软件安装完成后，即可使用 npm 安装 Hexo
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<h3 id="ben-di-chu-shi-hua-bo-ke">本地初始化博客</h3>
<p>1.安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>2.初始化完成后，运行如下命令自动生成hexo 博客相关的文件</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div></pre></td></tr></table></figure></p>
<p>3.运行如下命令，打开本地的服务器</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<p>4.在浏览器中打开localhost:4000，既可看到hexo运行的结果，本地的博客也就搭建完成了</p>
<h3 id="ru-he-xie-bo-ke">如何写博客</h3>
<p>使用hexo 写一篇博客是非常简单的，输入以下命令</p>
<p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo <span class="keyword">new</span> &lt;<span class="built_in">title</span>&gt;    <span class="comment">// hexo new firstarticle</span></div></pre></td></tr></table></figure></p>
<p>即可看到在<code>source/_posts</code> 文件夹下生成一个<code>&lt;title&gt;</code>命名的md（markdown）文件，用自己的喜欢的编辑器打开这个文件就可以书写博客了</p>
<p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Created: ~<span class="regexp">/xxxx/</span><span class="keyword">source</span><span class="regexp">/_posts/</span>firstarticle.md</div></pre></td></tr></table></figure></p>
<h3 id="fa-bu-bo-ke">发布博客</h3>
<p>书写完成后，运行
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo g</span></div></pre></td></tr></table></figure></p>
<p>自动生成博客文件，之后运行</p>
<p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo s</span></div></pre></td></tr></table></figure></p>
<p>可以在localhost:4000看到自己写的博文</p>
<h2 id="zai-github-shang-fa-bu-bo-ke">在github上发布博客</h2>
<h3 id="jian-li-ge-ren-de-git-hub-de-cang-ku">建立个人的GitHub的仓库</h3>
<p>1.github注册帐号</p>
<p>2.新建库 可以看到有个<code>绿色</code>的New按钮</p>
<p><img src="http://obqvt6b56.bkt.clouddn.com/blog-github-person.png" alt="Alt text"></p>
<p>点击进入后，在此处填入的库名个是为:  账户名.github.io
比如：我的账户名为sialvsic，那么此处填入的库名为 <code>sialvsic.github.io</code></p>
<p><img src="http://obqvt6b56.bkt.clouddn.com/blog-github-new.png" alt="Alt text"></p>
<p>点击create repository后，即可在github上生成一个git库</p>
<p><em>note</em> ：利用<strong>账户.github.io</strong> 这种方式搭建博客，每个github账户只能创建一个。</p>
<h3 id="fa-bu-dao-git-hub-shang">发布到GitHub上</h3>
<p>1.配置xx文件</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line"><span class="built_in">type</span>: git</div><div class="line">repo: &lt;repository url&gt;</div><div class="line">branch: [branch]</div><div class="line">message: [message]</div></pre></td></tr></table></figure></p>
<p>2.此时执行hexo deploy的命令(注意命令行中的行为)，即可将自己刚刚生成的博客发布到github上，可以登录以下url查看</p>
<p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http:<span class="regexp">//</span>账户名.github.io       eg:http:<span class="regexp">//</span>sialvsic.github.io</div></pre></td></tr></table></figure></p>
<p><em>note:</em> 可能deploy之后不会立即看到结果，需要等待10分钟左右。</p>
<p>当然到现在为止，一个免费的博客已经建立了，但唯一的问题就是以这个以下网址访问显得过low，身为博主，当然得有自己的域名，so 下一篇开始详述设置自己的域名</p>
<p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//xxxx.github.io</span></div></pre></td></tr></table></figure></p>
<h2 id="chang-jian-wen-ti">常见问题</h2>
<p>1.一开始以为要像平时使用github，要将所有的文件要放在 github 的库中</p>
<p><strong>对于sialvsic.github.io/库名</strong> 此类项目
文件的内容push到gh-pages分支，要呈现的页面以index.html为开始页面，github的会自动识别</p>
<p><strong>对于sialvsic.github.io</strong> 这种，github官方的文档说内容要push在master分支中，我最初不清楚<strong>hexo的工作原理</strong>，将整个hexo的文件夹push到sialvsic.github.io库中的master分支上，但是发现并不起作用，最后我才明白，原来根本不需要自己push到库中，在执行hexo deploy命令时，hexo会自动生成的html + css这些东西push到库中，而这个映射关系就是自己在_config.yml文件中写的这个配置</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy：</div><div class="line"><span class="built_in">type</span>：</div><div class="line">repo：&lt;repository url&gt;</div><div class="line">branch：[branch]</div><div class="line">message：[message]</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Communication and some idea]]></title>
      <url>http://yoursite.com/2015/11/27/communication-and-some-idea/</url>
      <content type="html"><![CDATA[<h1 id="gou-tong-amp-amp-yi-xie-gan-xiang">沟通 &amp;&amp; 一些感想</h1>
<p><strong>前言</strong></p>
<p>本周的思沃大讲堂，讲师和我们分享了有关沟通的一些方法，原则和实践，感觉收获良多。也不由得引起自己的一些思考：</p>
<h2 id="guan-yu-gou-tong">关于沟通</h2>
<p>一直以来自己是一个偏于内向的人，我是哥哥，而双胞胎的弟弟更加外向一些，或许就是这么互补吧。小时候父亲总说希望我能够外向些，能够像弟弟一样，多和别人沟通，交流。但一直以来，听过了早已无数次，但一直没有在意，到了大学，也是如此。或许我觉得一个人的生活更有意思，但实际上我心里的答案并不是这样，我觉得更大程度上是因为没有处在一个自己期待中的环境吧，没有遇到志同道合的朋友。可是，这样的想法对么，这是一个借口或是理由么，当然不是。现在想想，之前的我活的太局限了，以为自己看到的就是世界的全部，呆在自己的世界飘飘然。然而，自从暑假，进入思沃学院，这短短的一个半月时间，给我带来了巨大的成长，我不再是一个以自我为中心的弱者，老师给我们带来的是一种启示和引导，思想上到蜕变和做事方法的改变是让我觉得收获最大的。让我明白了，原来世界真的很大，我所不知道的东西还有很多，自己之前的想法还是太天真了。</p>
<p>就如我们的本周做的feedback一样，暑假我们也相互做了feedback，well的方面就不多说了，less well方面大家都觉得我可能还是平日里交流沟通太少，不怎么说话，有些沉默寡言······
我觉得大家说的很对，这确实是一个很大的问题，当时我就意识到，既然大家给我提出了这个问题那么这个问题就必须去解决。so，我对自己说，希望今后多和大家交流，哪怕每天只是多说一句话，多问一个问题。 如今，回过头来看看，这段时间里，自己确实有着很大变化，如果不是大家的反馈，我可能也没有这种良性的变化。</p>
<p>周六的时候，讲师更多的是去讲一些，在一个团队中如何去沟通的问题，毕竟沟通是解决问题的一种很良好的方式。对一个敏捷的团队也是如此，我知道thoughtworks是一家推行敏捷的公司，我们的项目团队也基本采用敏捷的模式，归纳而言，沟通在一个团队中最大的好处就是做了两件事：</p>
<blockquote>
<p>如果你想要，就一定要说，不说，别人怎么知道你想要呢？ （敢于沟通)</p>
<p>要想尽一切办法， 让客户觉得：“你以为你以为的就是你以为的” （确认自己的想法)</p>
</blockquote>
<p><code>客户付钱是让我们把事情做对而不是把事情改对</code>,及时的沟通会让我们减少很多不必要的事情。</p>
<p>虽然我没有亲身经历过一个真实的项目，可我也明白，有时候你不问清楚，有一点点的模糊都会带来很多的错误，甚至灾难。因为在一定程度上，每个都会发自本能的去脑补了一些不太清晰的东西，以我们自身的角度去理解，去判断。 这是很危险的。</p>
<p><strong>总结</strong></p>
<p>说了很多，其实道理大家都懂，就看自身怎么去实践，不懂就要问，这是小学时我们都学过的道理，只要我们在加上合适的时机和方式，沟通也没有那么难。</p>
<hr>
<h2 id="guan-yu-si-wo-da-jiang-tang">关于思沃大讲堂</h2>
<p>感觉过的很快，六周已经过去了，回顾这六周的内容：</p>
<ul>
<li>linux</li>
<li>git</li>
<li>html + css</li>
<li>response-design</li>
<li>javascript</li>
<li>communication</li>
</ul>
<p>每一周讲师都会给我们带来新鲜的技术和内容，让我在这六周里有很快的成长，接触到很多新鲜的事物，也逐渐认清了自己，知道了自己的水平如何，路还很长，还要学习很多的东西，但是看大家都很努力的拼搏成长，我也不能落后。</p>
<p>上周六的测试着实给人一次打击，简单的3道练习竟然没能按时做出来，当天晚上回去查了些资料才做出来了。回过头来想想，这是有问题的，我应该可以做出来而未能按时做出来，我觉得一方面是因为最近没有练习js 的编程，给自己提了个醒，重要的还是<code>基础</code>，<code>基础</code>，<code>基础</code> ，自己在API这方面还要再下功夫，多看，多学，多练；还有一方面是因为自己的时间安排不合理，效率有些低，经常陷入yak shaving的困境，浪费了很多的时间。最近的琐事比较多，没有办法很好的集中精力去做事情，这事目前亟待解决的。</p>
<p>解决方法：</p>
<ol>
<li>坚持使用种子习惯，坚持培养良好的习惯</li>
<li>使用一些效率工具 todoist， toggle，trello</li>
</ol>
]]></content>
    </entry>
    
  
  
</search>
